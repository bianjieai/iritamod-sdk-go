// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: side-chain/v1/query.proto

package side_chain

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QuerySpaceRequest is the request type for the Query/Space RPC
type QuerySpaceRequest struct {
	SpaceId uint64 `protobuf:"varint,1,opt,name=space_id,json=spaceId,proto3" json:"space_id,omitempty"`
}

func (m *QuerySpaceRequest) Reset()         { *m = QuerySpaceRequest{} }
func (m *QuerySpaceRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySpaceRequest) ProtoMessage()    {}
func (*QuerySpaceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_14da640d0a011456, []int{0}
}
func (m *QuerySpaceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySpaceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySpaceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySpaceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpaceRequest.Merge(m, src)
}
func (m *QuerySpaceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySpaceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpaceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpaceRequest proto.InternalMessageInfo

func (m *QuerySpaceRequest) GetSpaceId() uint64 {
	if m != nil {
		return m.SpaceId
	}
	return 0
}

// QuerySpaceResponse is the response type for the Query/Space RPC
type QuerySpaceResponse struct {
	Space *Space `protobuf:"bytes,1,opt,name=space,proto3" json:"space,omitempty"`
}

func (m *QuerySpaceResponse) Reset()         { *m = QuerySpaceResponse{} }
func (m *QuerySpaceResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySpaceResponse) ProtoMessage()    {}
func (*QuerySpaceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_14da640d0a011456, []int{1}
}
func (m *QuerySpaceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySpaceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySpaceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySpaceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpaceResponse.Merge(m, src)
}
func (m *QuerySpaceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySpaceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpaceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpaceResponse proto.InternalMessageInfo

func (m *QuerySpaceResponse) GetSpace() *Space {
	if m != nil {
		return m.Space
	}
	return nil
}

// QuerySpaceOfOwnerRequest is the request type for the Query/SpaceOfOwner RPC
type QuerySpaceOfOwnerRequest struct {
	Owner      string             `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QuerySpaceOfOwnerRequest) Reset()         { *m = QuerySpaceOfOwnerRequest{} }
func (m *QuerySpaceOfOwnerRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySpaceOfOwnerRequest) ProtoMessage()    {}
func (*QuerySpaceOfOwnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_14da640d0a011456, []int{2}
}
func (m *QuerySpaceOfOwnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySpaceOfOwnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySpaceOfOwnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySpaceOfOwnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpaceOfOwnerRequest.Merge(m, src)
}
func (m *QuerySpaceOfOwnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySpaceOfOwnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpaceOfOwnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpaceOfOwnerRequest proto.InternalMessageInfo

func (m *QuerySpaceOfOwnerRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *QuerySpaceOfOwnerRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QuerySpaceOfOwnerResponse is the response type for the Query/SpaceOfOwner RPC
type QuerySpaceOfOwnerResponse struct {
	Spaces     []Space             `protobuf:"bytes,1,rep,name=spaces,proto3" json:"spaces"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QuerySpaceOfOwnerResponse) Reset()         { *m = QuerySpaceOfOwnerResponse{} }
func (m *QuerySpaceOfOwnerResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySpaceOfOwnerResponse) ProtoMessage()    {}
func (*QuerySpaceOfOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_14da640d0a011456, []int{3}
}
func (m *QuerySpaceOfOwnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySpaceOfOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySpaceOfOwnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySpaceOfOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpaceOfOwnerResponse.Merge(m, src)
}
func (m *QuerySpaceOfOwnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySpaceOfOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpaceOfOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpaceOfOwnerResponse proto.InternalMessageInfo

func (m *QuerySpaceOfOwnerResponse) GetSpaces() []Space {
	if m != nil {
		return m.Spaces
	}
	return nil
}

func (m *QuerySpaceOfOwnerResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryBlockHeaderRequest is the request type for the Query/Record RPC
type QueryBlockHeaderRequest struct {
	SpaceId uint64 `protobuf:"varint,1,opt,name=space_id,json=spaceId,proto3" json:"space_id,omitempty"`
	Height  uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryBlockHeaderRequest) Reset()         { *m = QueryBlockHeaderRequest{} }
func (m *QueryBlockHeaderRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBlockHeaderRequest) ProtoMessage()    {}
func (*QueryBlockHeaderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_14da640d0a011456, []int{4}
}
func (m *QueryBlockHeaderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBlockHeaderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBlockHeaderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBlockHeaderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBlockHeaderRequest.Merge(m, src)
}
func (m *QueryBlockHeaderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBlockHeaderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBlockHeaderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBlockHeaderRequest proto.InternalMessageInfo

func (m *QueryBlockHeaderRequest) GetSpaceId() uint64 {
	if m != nil {
		return m.SpaceId
	}
	return 0
}

func (m *QueryBlockHeaderRequest) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

// QueryBlockHeaderResponse is the response type for the Query/Record RPC
type QueryBlockHeaderResponse struct {
	Header string `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`
}

func (m *QueryBlockHeaderResponse) Reset()         { *m = QueryBlockHeaderResponse{} }
func (m *QueryBlockHeaderResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBlockHeaderResponse) ProtoMessage()    {}
func (*QueryBlockHeaderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_14da640d0a011456, []int{5}
}
func (m *QueryBlockHeaderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBlockHeaderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBlockHeaderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBlockHeaderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBlockHeaderResponse.Merge(m, src)
}
func (m *QueryBlockHeaderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBlockHeaderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBlockHeaderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBlockHeaderResponse proto.InternalMessageInfo

func (m *QueryBlockHeaderResponse) GetHeader() string {
	if m != nil {
		return m.Header
	}
	return ""
}

func init() {
	proto.RegisterType((*QuerySpaceRequest)(nil), "iritamod.side_chain.v1.QuerySpaceRequest")
	proto.RegisterType((*QuerySpaceResponse)(nil), "iritamod.side_chain.v1.QuerySpaceResponse")
	proto.RegisterType((*QuerySpaceOfOwnerRequest)(nil), "iritamod.side_chain.v1.QuerySpaceOfOwnerRequest")
	proto.RegisterType((*QuerySpaceOfOwnerResponse)(nil), "iritamod.side_chain.v1.QuerySpaceOfOwnerResponse")
	proto.RegisterType((*QueryBlockHeaderRequest)(nil), "iritamod.side_chain.v1.QueryBlockHeaderRequest")
	proto.RegisterType((*QueryBlockHeaderResponse)(nil), "iritamod.side_chain.v1.QueryBlockHeaderResponse")
}

func init() { proto.RegisterFile("side-chain/v1/query.proto", fileDescriptor_14da640d0a011456) }

var fileDescriptor_14da640d0a011456 = []byte{
	// 552 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x41, 0x6f, 0x12, 0x41,
	0x14, 0x66, 0x5a, 0x40, 0x3b, 0xf5, 0xe2, 0xa4, 0xa9, 0x40, 0x74, 0x6d, 0xf6, 0x50, 0xdb, 0x1a,
	0x66, 0xba, 0xf4, 0x62, 0xf4, 0x62, 0x38, 0xa8, 0x24, 0x26, 0xd5, 0xf5, 0xe6, 0xa5, 0x99, 0x65,
	0xc7, 0x65, 0x6c, 0xd9, 0xa1, 0xcc, 0x82, 0x9a, 0x86, 0x8b, 0xbf, 0x40, 0xe3, 0x2f, 0x30, 0xfe,
	0x03, 0x7f, 0x45, 0x8f, 0x4d, 0xbc, 0x78, 0x32, 0x06, 0xfc, 0x0d, 0x9e, 0xcd, 0xbe, 0x19, 0x64,
	0xb1, 0x20, 0xed, 0x8d, 0xc7, 0x7c, 0xdf, 0xfb, 0xbe, 0xef, 0xbd, 0x97, 0xc5, 0x65, 0x2d, 0x43,
	0x51, 0x6d, 0xb6, 0xb8, 0x8c, 0x59, 0xdf, 0x63, 0xc7, 0x3d, 0xd1, 0x7d, 0x47, 0x3b, 0x5d, 0x95,
	0x28, 0xb2, 0x2e, 0xbb, 0x32, 0xe1, 0x6d, 0x15, 0xd2, 0x14, 0x73, 0x00, 0x18, 0xda, 0xf7, 0x2a,
	0x6b, 0x91, 0x8a, 0x14, 0x40, 0x58, 0xfa, 0xcb, 0xa0, 0x2b, 0x37, 0x23, 0xa5, 0xa2, 0x23, 0xc1,
	0x78, 0x47, 0x32, 0x1e, 0xc7, 0x2a, 0xe1, 0x89, 0x54, 0xb1, 0xb6, 0xaf, 0xce, 0xb4, 0xcc, 0xa4,
	0xb2, 0xef, 0x3b, 0x4d, 0xa5, 0xdb, 0x4a, 0xb3, 0x80, 0x6b, 0x61, 0x4c, 0xb0, 0xbe, 0x17, 0x88,
	0x84, 0x7b, 0xac, 0xc3, 0x23, 0x19, 0x43, 0x33, 0x83, 0x75, 0x29, 0xbe, 0xfe, 0x3c, 0x45, 0xbc,
	0xe8, 0xf0, 0xa6, 0xf0, 0xc5, 0x71, 0x4f, 0xe8, 0x84, 0x94, 0xf1, 0x55, 0x9d, 0xd6, 0x07, 0x32,
	0x2c, 0xa1, 0x0d, 0xb4, 0x95, 0xf7, 0xaf, 0x40, 0xdd, 0x08, 0xdd, 0x06, 0x26, 0x59, 0xbc, 0xee,
	0xa8, 0x58, 0x0b, 0xb2, 0x87, 0x0b, 0x00, 0x00, 0xf4, 0x6a, 0xed, 0x16, 0x9d, 0x9d, 0x96, 0x1a,
	0x96, 0xc1, 0xba, 0x6f, 0x71, 0x69, 0xd2, 0x6a, 0xff, 0xd5, 0xfe, 0x9b, 0x58, 0x74, 0xc7, 0x0e,
	0xd6, 0x70, 0x41, 0xa5, 0x35, 0x34, 0x5c, 0xf1, 0x4d, 0x41, 0x1e, 0x61, 0x3c, 0x09, 0x50, 0x5a,
	0x02, 0xad, 0x4d, 0x6a, 0xd2, 0xd2, 0x34, 0x2d, 0x35, 0x23, 0xb7, 0x69, 0xe9, 0x33, 0x1e, 0x8d,
	0x33, 0xf9, 0x19, 0xa6, 0xfb, 0x19, 0xe1, 0xf2, 0x0c, 0x69, 0x1b, 0xe6, 0x01, 0x2e, 0x82, 0x41,
	0x5d, 0x42, 0x1b, 0xcb, 0x0b, 0xd3, 0xd4, 0xf3, 0xa7, 0x3f, 0x6e, 0xe7, 0x7c, 0x4b, 0x21, 0x8f,
	0x67, 0x58, 0xbc, 0xb3, 0xd0, 0xa2, 0x51, 0x9e, 0xf2, 0xf8, 0x14, 0xdf, 0x00, 0x8b, 0xf5, 0x23,
	0xd5, 0x3c, 0x7c, 0x22, 0x78, 0x38, 0x19, 0xce, 0xfc, 0xf5, 0x90, 0x75, 0x5c, 0x6c, 0x09, 0x19,
	0xb5, 0x12, 0x90, 0xce, 0xfb, 0xb6, 0x72, 0x6b, 0x76, 0xd6, 0x53, 0xdd, 0x6c, 0x5e, 0xe0, 0xa4,
	0xff, 0x00, 0x67, 0xc5, 0xb7, 0x55, 0xed, 0xf7, 0x32, 0x2e, 0x00, 0x89, 0x7c, 0x44, 0xb8, 0x00,
	0x61, 0xc9, 0xf6, 0xbc, 0x59, 0x9c, 0x3b, 0xa2, 0xca, 0xce, 0x45, 0xa0, 0xc6, 0x82, 0xeb, 0xbd,
	0xff, 0xf6, 0xeb, 0xd3, 0xd2, 0x5d, 0xb2, 0xcd, 0xc6, 0x1c, 0xf6, 0xcf, 0x8d, 0xc3, 0x74, 0xd9,
	0xc9, 0x38, 0xf7, 0x80, 0x7c, 0x41, 0xf8, 0x5a, 0x76, 0x7d, 0x64, 0x77, 0xb1, 0xde, 0xf4, 0x91,
	0x55, 0xbc, 0x4b, 0x30, 0xac, 0x51, 0x0a, 0x46, 0xb7, 0xc8, 0xe6, 0x22, 0xa3, 0x70, 0xb0, 0x03,
	0xf2, 0x15, 0xe1, 0xd5, 0xcc, 0xcc, 0x09, 0xfb, 0xaf, 0xe4, 0xf9, 0x5d, 0x57, 0x76, 0x2f, 0x4e,
	0xb0, 0x16, 0x1f, 0x82, 0xc5, 0xfb, 0xe4, 0xde, 0x3c, 0x8b, 0x41, 0x4a, 0x32, 0x3b, 0xce, 0x4e,
	0x94, 0x9d, 0x98, 0x5b, 0x19, 0xd4, 0x1b, 0xa7, 0x43, 0x07, 0x9d, 0x0d, 0x1d, 0xf4, 0x73, 0xe8,
	0xa0, 0x0f, 0x23, 0x27, 0x77, 0x36, 0x72, 0x72, 0xdf, 0x47, 0x4e, 0xee, 0x25, 0x8b, 0x64, 0xd2,
	0xea, 0x05, 0xb4, 0xa9, 0xda, 0x2c, 0x90, 0x3c, 0x7e, 0x2d, 0x05, 0x97, 0x7f, 0x75, 0xaa, 0x3a,
	0x3c, 0xac, 0x46, 0x2a, 0x23, 0x17, 0x14, 0xe1, 0x2b, 0xb3, 0xf7, 0x27, 0x00, 0x00, 0xff, 0xff,
	0x8b, 0x84, 0x83, 0x11, 0x1a, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Space queries a space.
	Space(ctx context.Context, in *QuerySpaceRequest, opts ...grpc.CallOption) (*QuerySpaceResponse, error)
	// SpaceOfOwner queries all spaces owned by an address.
	SpaceOfOwner(ctx context.Context, in *QuerySpaceOfOwnerRequest, opts ...grpc.CallOption) (*QuerySpaceOfOwnerResponse, error)
	// BlockHeader queries a side chain block header.
	BlockHeader(ctx context.Context, in *QueryBlockHeaderRequest, opts ...grpc.CallOption) (*QueryBlockHeaderResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Space(ctx context.Context, in *QuerySpaceRequest, opts ...grpc.CallOption) (*QuerySpaceResponse, error) {
	out := new(QuerySpaceResponse)
	err := c.cc.Invoke(ctx, "/iritamod.side_chain.v1.Query/Space", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SpaceOfOwner(ctx context.Context, in *QuerySpaceOfOwnerRequest, opts ...grpc.CallOption) (*QuerySpaceOfOwnerResponse, error) {
	out := new(QuerySpaceOfOwnerResponse)
	err := c.cc.Invoke(ctx, "/iritamod.side_chain.v1.Query/SpaceOfOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BlockHeader(ctx context.Context, in *QueryBlockHeaderRequest, opts ...grpc.CallOption) (*QueryBlockHeaderResponse, error) {
	out := new(QueryBlockHeaderResponse)
	err := c.cc.Invoke(ctx, "/iritamod.side_chain.v1.Query/BlockHeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Space queries a space.
	Space(context.Context, *QuerySpaceRequest) (*QuerySpaceResponse, error)
	// SpaceOfOwner queries all spaces owned by an address.
	SpaceOfOwner(context.Context, *QuerySpaceOfOwnerRequest) (*QuerySpaceOfOwnerResponse, error)
	// BlockHeader queries a side chain block header.
	BlockHeader(context.Context, *QueryBlockHeaderRequest) (*QueryBlockHeaderResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Space(ctx context.Context, req *QuerySpaceRequest) (*QuerySpaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Space not implemented")
}
func (*UnimplementedQueryServer) SpaceOfOwner(ctx context.Context, req *QuerySpaceOfOwnerRequest) (*QuerySpaceOfOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpaceOfOwner not implemented")
}
func (*UnimplementedQueryServer) BlockHeader(ctx context.Context, req *QueryBlockHeaderRequest) (*QueryBlockHeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockHeader not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Space_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Space(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iritamod.side_chain.v1.Query/Space",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Space(ctx, req.(*QuerySpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SpaceOfOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySpaceOfOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SpaceOfOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iritamod.side_chain.v1.Query/SpaceOfOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SpaceOfOwner(ctx, req.(*QuerySpaceOfOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BlockHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBlockHeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BlockHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iritamod.side_chain.v1.Query/BlockHeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BlockHeader(ctx, req.(*QueryBlockHeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "iritamod.side_chain.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Space",
			Handler:    _Query_Space_Handler,
		},
		{
			MethodName: "SpaceOfOwner",
			Handler:    _Query_SpaceOfOwner_Handler,
		},
		{
			MethodName: "BlockHeader",
			Handler:    _Query_BlockHeader_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "side-chain/v1/query.proto",
}

func (m *QuerySpaceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySpaceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySpaceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SpaceId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.SpaceId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QuerySpaceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySpaceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySpaceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Space != nil {
		{
			size, err := m.Space.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySpaceOfOwnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySpaceOfOwnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySpaceOfOwnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySpaceOfOwnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySpaceOfOwnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySpaceOfOwnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Spaces) > 0 {
		for iNdEx := len(m.Spaces) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Spaces[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryBlockHeaderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBlockHeaderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBlockHeaderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if m.SpaceId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.SpaceId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryBlockHeaderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBlockHeaderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBlockHeaderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Header) > 0 {
		i -= len(m.Header)
		copy(dAtA[i:], m.Header)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Header)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QuerySpaceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SpaceId != 0 {
		n += 1 + sovQuery(uint64(m.SpaceId))
	}
	return n
}

func (m *QuerySpaceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Space != nil {
		l = m.Space.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySpaceOfOwnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySpaceOfOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Spaces) > 0 {
		for _, e := range m.Spaces {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBlockHeaderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SpaceId != 0 {
		n += 1 + sovQuery(uint64(m.SpaceId))
	}
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	return n
}

func (m *QueryBlockHeaderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Header)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QuerySpaceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySpaceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySpaceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceId", wireType)
			}
			m.SpaceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpaceId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySpaceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySpaceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySpaceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Space", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Space == nil {
				m.Space = &Space{}
			}
			if err := m.Space.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySpaceOfOwnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySpaceOfOwnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySpaceOfOwnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySpaceOfOwnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySpaceOfOwnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySpaceOfOwnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spaces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Spaces = append(m.Spaces, Space{})
			if err := m.Spaces[len(m.Spaces)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBlockHeaderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBlockHeaderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBlockHeaderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceId", wireType)
			}
			m.SpaceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpaceId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBlockHeaderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBlockHeaderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBlockHeaderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Header = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
