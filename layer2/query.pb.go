// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: layer2/v1/query.proto

package layer2

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	query "github.com/irisnet/core-sdk-go/types/query"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryClassForNFTRequest is the request type for the Query/ClassForNFT RPC
type QueryClassForNFTRequest struct {
	ClassId string `protobuf:"bytes,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
}

func (m *QueryClassForNFTRequest) Reset()         { *m = QueryClassForNFTRequest{} }
func (m *QueryClassForNFTRequest) String() string { return proto.CompactTextString(m) }
func (*QueryClassForNFTRequest) ProtoMessage()    {}
func (*QueryClassForNFTRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_253be56ab385642c, []int{0}
}
func (m *QueryClassForNFTRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryClassForNFTRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryClassForNFTRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryClassForNFTRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryClassForNFTRequest.Merge(m, src)
}
func (m *QueryClassForNFTRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryClassForNFTRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryClassForNFTRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryClassForNFTRequest proto.InternalMessageInfo

func (m *QueryClassForNFTRequest) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

// QueryClassForNFTResponse is the response type for the Query/ClassForNFT RPC
type QueryClassForNFTResponse struct {
	Class *ClassForNFT `protobuf:"bytes,1,opt,name=class,proto3" json:"class,omitempty"`
}

func (m *QueryClassForNFTResponse) Reset()         { *m = QueryClassForNFTResponse{} }
func (m *QueryClassForNFTResponse) String() string { return proto.CompactTextString(m) }
func (*QueryClassForNFTResponse) ProtoMessage()    {}
func (*QueryClassForNFTResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_253be56ab385642c, []int{1}
}
func (m *QueryClassForNFTResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryClassForNFTResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryClassForNFTResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryClassForNFTResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryClassForNFTResponse.Merge(m, src)
}
func (m *QueryClassForNFTResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryClassForNFTResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryClassForNFTResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryClassForNFTResponse proto.InternalMessageInfo

func (m *QueryClassForNFTResponse) GetClass() *ClassForNFT {
	if m != nil {
		return m.Class
	}
	return nil
}

// QueryClassesForNFTRequest is the request type for the Query/ClassesForNFT RPC
type QueryClassesForNFTRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryClassesForNFTRequest) Reset()         { *m = QueryClassesForNFTRequest{} }
func (m *QueryClassesForNFTRequest) String() string { return proto.CompactTextString(m) }
func (*QueryClassesForNFTRequest) ProtoMessage()    {}
func (*QueryClassesForNFTRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_253be56ab385642c, []int{2}
}
func (m *QueryClassesForNFTRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryClassesForNFTRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryClassesForNFTRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryClassesForNFTRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryClassesForNFTRequest.Merge(m, src)
}
func (m *QueryClassesForNFTRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryClassesForNFTRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryClassesForNFTRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryClassesForNFTRequest proto.InternalMessageInfo

func (m *QueryClassesForNFTRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryClassesForNFTResponse is the response type for the Query/ClassesForNFT RPC
type QueryClassesForNFTResponse struct {
	Classes    []ClassForNFT       `protobuf:"bytes,1,rep,name=classes,proto3" json:"classes"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryClassesForNFTResponse) Reset()         { *m = QueryClassesForNFTResponse{} }
func (m *QueryClassesForNFTResponse) String() string { return proto.CompactTextString(m) }
func (*QueryClassesForNFTResponse) ProtoMessage()    {}
func (*QueryClassesForNFTResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_253be56ab385642c, []int{3}
}
func (m *QueryClassesForNFTResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryClassesForNFTResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryClassesForNFTResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryClassesForNFTResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryClassesForNFTResponse.Merge(m, src)
}
func (m *QueryClassesForNFTResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryClassesForNFTResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryClassesForNFTResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryClassesForNFTResponse proto.InternalMessageInfo

func (m *QueryClassesForNFTResponse) GetClasses() []ClassForNFT {
	if m != nil {
		return m.Classes
	}
	return nil
}

func (m *QueryClassesForNFTResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryTokenForNFTRequest is the request type for the Query/TokenForNFT RPC
type QueryTokenForNFTRequest struct {
	SpaceId uint64 `protobuf:"varint,1,opt,name=space_id,json=spaceId,proto3" json:"space_id,omitempty"`
	ClassId string `protobuf:"bytes,2,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	TokenId string `protobuf:"bytes,3,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
}

func (m *QueryTokenForNFTRequest) Reset()         { *m = QueryTokenForNFTRequest{} }
func (m *QueryTokenForNFTRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTokenForNFTRequest) ProtoMessage()    {}
func (*QueryTokenForNFTRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_253be56ab385642c, []int{4}
}
func (m *QueryTokenForNFTRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenForNFTRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenForNFTRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenForNFTRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenForNFTRequest.Merge(m, src)
}
func (m *QueryTokenForNFTRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenForNFTRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenForNFTRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenForNFTRequest proto.InternalMessageInfo

func (m *QueryTokenForNFTRequest) GetSpaceId() uint64 {
	if m != nil {
		return m.SpaceId
	}
	return 0
}

func (m *QueryTokenForNFTRequest) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *QueryTokenForNFTRequest) GetTokenId() string {
	if m != nil {
		return m.TokenId
	}
	return ""
}

// QueryTokenForNFTResponse is the response type for the Query/TokenForNFT RPC
type QueryTokenForNFTResponse struct {
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *QueryTokenForNFTResponse) Reset()         { *m = QueryTokenForNFTResponse{} }
func (m *QueryTokenForNFTResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTokenForNFTResponse) ProtoMessage()    {}
func (*QueryTokenForNFTResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_253be56ab385642c, []int{5}
}
func (m *QueryTokenForNFTResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenForNFTResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenForNFTResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenForNFTResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenForNFTResponse.Merge(m, src)
}
func (m *QueryTokenForNFTResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenForNFTResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenForNFTResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenForNFTResponse proto.InternalMessageInfo

func (m *QueryTokenForNFTResponse) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

// QueryCollectionForNFTRequest is the request type for the Query/CollectionForNFT RPC
type QueryCollectionForNFTRequest struct {
	SpaceId    uint64             `protobuf:"varint,1,opt,name=space_id,json=spaceId,proto3" json:"space_id,omitempty"`
	ClassId    string             `protobuf:"bytes,2,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryCollectionForNFTRequest) Reset()         { *m = QueryCollectionForNFTRequest{} }
func (m *QueryCollectionForNFTRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCollectionForNFTRequest) ProtoMessage()    {}
func (*QueryCollectionForNFTRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_253be56ab385642c, []int{6}
}
func (m *QueryCollectionForNFTRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCollectionForNFTRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCollectionForNFTRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCollectionForNFTRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCollectionForNFTRequest.Merge(m, src)
}
func (m *QueryCollectionForNFTRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCollectionForNFTRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCollectionForNFTRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCollectionForNFTRequest proto.InternalMessageInfo

func (m *QueryCollectionForNFTRequest) GetSpaceId() uint64 {
	if m != nil {
		return m.SpaceId
	}
	return 0
}

func (m *QueryCollectionForNFTRequest) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *QueryCollectionForNFTRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryCollectionForNFTResponse is the response type for the Query/CollectionForNFT RPC
type QueryCollectionForNFTResponse struct {
	ClassId    string              `protobuf:"bytes,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	Tokens     []TokenForNFT       `protobuf:"bytes,2,rep,name=tokens,proto3" json:"tokens"`
	Pagination *query.PageResponse `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryCollectionForNFTResponse) Reset()         { *m = QueryCollectionForNFTResponse{} }
func (m *QueryCollectionForNFTResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCollectionForNFTResponse) ProtoMessage()    {}
func (*QueryCollectionForNFTResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_253be56ab385642c, []int{7}
}
func (m *QueryCollectionForNFTResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCollectionForNFTResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCollectionForNFTResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCollectionForNFTResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCollectionForNFTResponse.Merge(m, src)
}
func (m *QueryCollectionForNFTResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCollectionForNFTResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCollectionForNFTResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCollectionForNFTResponse proto.InternalMessageInfo

func (m *QueryCollectionForNFTResponse) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *QueryCollectionForNFTResponse) GetTokens() []TokenForNFT {
	if m != nil {
		return m.Tokens
	}
	return nil
}

func (m *QueryCollectionForNFTResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryTokensOfOwnerForNFTRequest is the request type for the Query/TokensOfOwnerForNFT RPC
type QueryTokensOfOwnerForNFTRequest struct {
	SpaceId    uint64             `protobuf:"varint,1,opt,name=space_id,json=spaceId,proto3" json:"space_id,omitempty"`
	ClassId    string             `protobuf:"bytes,2,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	Owner      string             `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,4,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryTokensOfOwnerForNFTRequest) Reset()         { *m = QueryTokensOfOwnerForNFTRequest{} }
func (m *QueryTokensOfOwnerForNFTRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTokensOfOwnerForNFTRequest) ProtoMessage()    {}
func (*QueryTokensOfOwnerForNFTRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_253be56ab385642c, []int{8}
}
func (m *QueryTokensOfOwnerForNFTRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokensOfOwnerForNFTRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokensOfOwnerForNFTRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokensOfOwnerForNFTRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokensOfOwnerForNFTRequest.Merge(m, src)
}
func (m *QueryTokensOfOwnerForNFTRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokensOfOwnerForNFTRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokensOfOwnerForNFTRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokensOfOwnerForNFTRequest proto.InternalMessageInfo

func (m *QueryTokensOfOwnerForNFTRequest) GetSpaceId() uint64 {
	if m != nil {
		return m.SpaceId
	}
	return 0
}

func (m *QueryTokensOfOwnerForNFTRequest) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *QueryTokensOfOwnerForNFTRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *QueryTokensOfOwnerForNFTRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryTokensOfOwnerForNFTResponse is the response type for the Query/TokensOfOwnerForNFT RPC
type QueryTokensOfOwnerForNFTResponse struct {
	Tokens     []TokenForNFTByOwner `protobuf:"bytes,1,rep,name=tokens,proto3" json:"tokens"`
	Pagination *query.PageResponse  `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryTokensOfOwnerForNFTResponse) Reset()         { *m = QueryTokensOfOwnerForNFTResponse{} }
func (m *QueryTokensOfOwnerForNFTResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTokensOfOwnerForNFTResponse) ProtoMessage()    {}
func (*QueryTokensOfOwnerForNFTResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_253be56ab385642c, []int{9}
}
func (m *QueryTokensOfOwnerForNFTResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokensOfOwnerForNFTResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokensOfOwnerForNFTResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokensOfOwnerForNFTResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokensOfOwnerForNFTResponse.Merge(m, src)
}
func (m *QueryTokensOfOwnerForNFTResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokensOfOwnerForNFTResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokensOfOwnerForNFTResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokensOfOwnerForNFTResponse proto.InternalMessageInfo

func (m *QueryTokensOfOwnerForNFTResponse) GetTokens() []TokenForNFTByOwner {
	if m != nil {
		return m.Tokens
	}
	return nil
}

func (m *QueryTokensOfOwnerForNFTResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryBaseUriForNFTRequest is the request type for the Query/BaseUriForNFT RPC
type QueryBaseUriForNFTRequest struct {
	ClassId string `protobuf:"bytes,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
}

func (m *QueryBaseUriForNFTRequest) Reset()         { *m = QueryBaseUriForNFTRequest{} }
func (m *QueryBaseUriForNFTRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBaseUriForNFTRequest) ProtoMessage()    {}
func (*QueryBaseUriForNFTRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_253be56ab385642c, []int{10}
}
func (m *QueryBaseUriForNFTRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBaseUriForNFTRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBaseUriForNFTRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBaseUriForNFTRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBaseUriForNFTRequest.Merge(m, src)
}
func (m *QueryBaseUriForNFTRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBaseUriForNFTRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBaseUriForNFTRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBaseUriForNFTRequest proto.InternalMessageInfo

func (m *QueryBaseUriForNFTRequest) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

// QueryBaseUriForNFTResponse is the response type for the Query/BaseUriForNFT RPC
type QueryBaseUriForNFTResponse struct {
	BaseUri string `protobuf:"bytes,1,opt,name=base_uri,json=baseUri,proto3" json:"base_uri,omitempty"`
}

func (m *QueryBaseUriForNFTResponse) Reset()         { *m = QueryBaseUriForNFTResponse{} }
func (m *QueryBaseUriForNFTResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBaseUriForNFTResponse) ProtoMessage()    {}
func (*QueryBaseUriForNFTResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_253be56ab385642c, []int{11}
}
func (m *QueryBaseUriForNFTResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBaseUriForNFTResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBaseUriForNFTResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBaseUriForNFTResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBaseUriForNFTResponse.Merge(m, src)
}
func (m *QueryBaseUriForNFTResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBaseUriForNFTResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBaseUriForNFTResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBaseUriForNFTResponse proto.InternalMessageInfo

func (m *QueryBaseUriForNFTResponse) GetBaseUri() string {
	if m != nil {
		return m.BaseUri
	}
	return ""
}

// QueryTokenUriForNFTRequest is the request type for the Query/TokenUriForNFT RPC
type QueryTokenUriForNFTRequest struct {
	SpaceId uint64 `protobuf:"varint,1,opt,name=space_id,json=spaceId,proto3" json:"space_id,omitempty"`
	ClassId string `protobuf:"bytes,2,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	TokenId string `protobuf:"bytes,3,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
}

func (m *QueryTokenUriForNFTRequest) Reset()         { *m = QueryTokenUriForNFTRequest{} }
func (m *QueryTokenUriForNFTRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTokenUriForNFTRequest) ProtoMessage()    {}
func (*QueryTokenUriForNFTRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_253be56ab385642c, []int{12}
}
func (m *QueryTokenUriForNFTRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenUriForNFTRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenUriForNFTRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenUriForNFTRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenUriForNFTRequest.Merge(m, src)
}
func (m *QueryTokenUriForNFTRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenUriForNFTRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenUriForNFTRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenUriForNFTRequest proto.InternalMessageInfo

func (m *QueryTokenUriForNFTRequest) GetSpaceId() uint64 {
	if m != nil {
		return m.SpaceId
	}
	return 0
}

func (m *QueryTokenUriForNFTRequest) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *QueryTokenUriForNFTRequest) GetTokenId() string {
	if m != nil {
		return m.TokenId
	}
	return ""
}

// QueryTokenUriForNFTResponse is the response type for the Query/TokenUriForNFT RPC
type QueryTokenUriForNFTResponse struct {
	TokenUri string `protobuf:"bytes,1,opt,name=token_uri,json=tokenUri,proto3" json:"token_uri,omitempty"`
}

func (m *QueryTokenUriForNFTResponse) Reset()         { *m = QueryTokenUriForNFTResponse{} }
func (m *QueryTokenUriForNFTResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTokenUriForNFTResponse) ProtoMessage()    {}
func (*QueryTokenUriForNFTResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_253be56ab385642c, []int{13}
}
func (m *QueryTokenUriForNFTResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenUriForNFTResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenUriForNFTResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenUriForNFTResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenUriForNFTResponse.Merge(m, src)
}
func (m *QueryTokenUriForNFTResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenUriForNFTResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenUriForNFTResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenUriForNFTResponse proto.InternalMessageInfo

func (m *QueryTokenUriForNFTResponse) GetTokenUri() string {
	if m != nil {
		return m.TokenUri
	}
	return ""
}

// QuerySpaceRequest is the request type for the Query/Space RPC
type QuerySpaceRequest struct {
	SpaceId uint64 `protobuf:"varint,1,opt,name=space_id,json=spaceId,proto3" json:"space_id,omitempty"`
}

func (m *QuerySpaceRequest) Reset()         { *m = QuerySpaceRequest{} }
func (m *QuerySpaceRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySpaceRequest) ProtoMessage()    {}
func (*QuerySpaceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_253be56ab385642c, []int{14}
}
func (m *QuerySpaceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySpaceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySpaceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySpaceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpaceRequest.Merge(m, src)
}
func (m *QuerySpaceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySpaceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpaceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpaceRequest proto.InternalMessageInfo

func (m *QuerySpaceRequest) GetSpaceId() uint64 {
	if m != nil {
		return m.SpaceId
	}
	return 0
}

// QuerySpaceResponse is the response type for the Query/Space RPC
type QuerySpaceResponse struct {
	Space *Space `protobuf:"bytes,1,opt,name=space,proto3" json:"space,omitempty"`
}

func (m *QuerySpaceResponse) Reset()         { *m = QuerySpaceResponse{} }
func (m *QuerySpaceResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySpaceResponse) ProtoMessage()    {}
func (*QuerySpaceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_253be56ab385642c, []int{15}
}
func (m *QuerySpaceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySpaceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySpaceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySpaceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpaceResponse.Merge(m, src)
}
func (m *QuerySpaceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySpaceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpaceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpaceResponse proto.InternalMessageInfo

func (m *QuerySpaceResponse) GetSpace() *Space {
	if m != nil {
		return m.Space
	}
	return nil
}

// QuerySpaceOfOwnerRequest is the request type for the Query/SpaceOfOwner RPC
type QuerySpaceOfOwnerRequest struct {
	Owner      string             `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QuerySpaceOfOwnerRequest) Reset()         { *m = QuerySpaceOfOwnerRequest{} }
func (m *QuerySpaceOfOwnerRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySpaceOfOwnerRequest) ProtoMessage()    {}
func (*QuerySpaceOfOwnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_253be56ab385642c, []int{16}
}
func (m *QuerySpaceOfOwnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySpaceOfOwnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySpaceOfOwnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySpaceOfOwnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpaceOfOwnerRequest.Merge(m, src)
}
func (m *QuerySpaceOfOwnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySpaceOfOwnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpaceOfOwnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpaceOfOwnerRequest proto.InternalMessageInfo

func (m *QuerySpaceOfOwnerRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *QuerySpaceOfOwnerRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QuerySpaceOfOwnerResponse is the response type for the Query/SpaceOfOwner RPC
type QuerySpaceOfOwnerResponse struct {
	Spaces     []Space             `protobuf:"bytes,1,rep,name=spaces,proto3" json:"spaces"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QuerySpaceOfOwnerResponse) Reset()         { *m = QuerySpaceOfOwnerResponse{} }
func (m *QuerySpaceOfOwnerResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySpaceOfOwnerResponse) ProtoMessage()    {}
func (*QuerySpaceOfOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_253be56ab385642c, []int{17}
}
func (m *QuerySpaceOfOwnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySpaceOfOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySpaceOfOwnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySpaceOfOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpaceOfOwnerResponse.Merge(m, src)
}
func (m *QuerySpaceOfOwnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySpaceOfOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpaceOfOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpaceOfOwnerResponse proto.InternalMessageInfo

func (m *QuerySpaceOfOwnerResponse) GetSpaces() []Space {
	if m != nil {
		return m.Spaces
	}
	return nil
}

func (m *QuerySpaceOfOwnerResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryRecordRequest is the request type for the Query/Record RPC
type QueryL2BlockHeaderRequest struct {
	SpaceId uint64 `protobuf:"varint,1,opt,name=space_id,json=spaceId,proto3" json:"space_id,omitempty"`
	Height  uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryL2BlockHeaderRequest) Reset()         { *m = QueryL2BlockHeaderRequest{} }
func (m *QueryL2BlockHeaderRequest) String() string { return proto.CompactTextString(m) }
func (*QueryL2BlockHeaderRequest) ProtoMessage()    {}
func (*QueryL2BlockHeaderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_253be56ab385642c, []int{18}
}
func (m *QueryL2BlockHeaderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryL2BlockHeaderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryL2BlockHeaderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryL2BlockHeaderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryL2BlockHeaderRequest.Merge(m, src)
}
func (m *QueryL2BlockHeaderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryL2BlockHeaderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryL2BlockHeaderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryL2BlockHeaderRequest proto.InternalMessageInfo

func (m *QueryL2BlockHeaderRequest) GetSpaceId() uint64 {
	if m != nil {
		return m.SpaceId
	}
	return 0
}

func (m *QueryL2BlockHeaderRequest) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

// QueryRecordResponse is the response type for the Query/Record RPC
type QueryL2BlockHeaderResponse struct {
	Header string `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`
}

func (m *QueryL2BlockHeaderResponse) Reset()         { *m = QueryL2BlockHeaderResponse{} }
func (m *QueryL2BlockHeaderResponse) String() string { return proto.CompactTextString(m) }
func (*QueryL2BlockHeaderResponse) ProtoMessage()    {}
func (*QueryL2BlockHeaderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_253be56ab385642c, []int{19}
}
func (m *QueryL2BlockHeaderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryL2BlockHeaderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryL2BlockHeaderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryL2BlockHeaderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryL2BlockHeaderResponse.Merge(m, src)
}
func (m *QueryL2BlockHeaderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryL2BlockHeaderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryL2BlockHeaderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryL2BlockHeaderResponse proto.InternalMessageInfo

func (m *QueryL2BlockHeaderResponse) GetHeader() string {
	if m != nil {
		return m.Header
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryClassForNFTRequest)(nil), "iritamod.layer2.v1.QueryClassForNFTRequest")
	proto.RegisterType((*QueryClassForNFTResponse)(nil), "iritamod.layer2.v1.QueryClassForNFTResponse")
	proto.RegisterType((*QueryClassesForNFTRequest)(nil), "iritamod.layer2.v1.QueryClassesForNFTRequest")
	proto.RegisterType((*QueryClassesForNFTResponse)(nil), "iritamod.layer2.v1.QueryClassesForNFTResponse")
	proto.RegisterType((*QueryTokenForNFTRequest)(nil), "iritamod.layer2.v1.QueryTokenForNFTRequest")
	proto.RegisterType((*QueryTokenForNFTResponse)(nil), "iritamod.layer2.v1.QueryTokenForNFTResponse")
	proto.RegisterType((*QueryCollectionForNFTRequest)(nil), "iritamod.layer2.v1.QueryCollectionForNFTRequest")
	proto.RegisterType((*QueryCollectionForNFTResponse)(nil), "iritamod.layer2.v1.QueryCollectionForNFTResponse")
	proto.RegisterType((*QueryTokensOfOwnerForNFTRequest)(nil), "iritamod.layer2.v1.QueryTokensOfOwnerForNFTRequest")
	proto.RegisterType((*QueryTokensOfOwnerForNFTResponse)(nil), "iritamod.layer2.v1.QueryTokensOfOwnerForNFTResponse")
	proto.RegisterType((*QueryBaseUriForNFTRequest)(nil), "iritamod.layer2.v1.QueryBaseUriForNFTRequest")
	proto.RegisterType((*QueryBaseUriForNFTResponse)(nil), "iritamod.layer2.v1.QueryBaseUriForNFTResponse")
	proto.RegisterType((*QueryTokenUriForNFTRequest)(nil), "iritamod.layer2.v1.QueryTokenUriForNFTRequest")
	proto.RegisterType((*QueryTokenUriForNFTResponse)(nil), "iritamod.layer2.v1.QueryTokenUriForNFTResponse")
	proto.RegisterType((*QuerySpaceRequest)(nil), "iritamod.layer2.v1.QuerySpaceRequest")
	proto.RegisterType((*QuerySpaceResponse)(nil), "iritamod.layer2.v1.QuerySpaceResponse")
	proto.RegisterType((*QuerySpaceOfOwnerRequest)(nil), "iritamod.layer2.v1.QuerySpaceOfOwnerRequest")
	proto.RegisterType((*QuerySpaceOfOwnerResponse)(nil), "iritamod.layer2.v1.QuerySpaceOfOwnerResponse")
	proto.RegisterType((*QueryL2BlockHeaderRequest)(nil), "iritamod.layer2.v1.QueryL2BlockHeaderRequest")
	proto.RegisterType((*QueryL2BlockHeaderResponse)(nil), "iritamod.layer2.v1.QueryL2BlockHeaderResponse")
}

func init() { proto.RegisterFile("layer2/v1/query.proto", fileDescriptor_253be56ab385642c) }

var fileDescriptor_253be56ab385642c = []byte{
	// 1063 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xce, 0xd8, 0x71, 0x4a, 0x5f, 0x08, 0x82, 0xa1, 0x94, 0x64, 0x5b, 0x9c, 0xb2, 0xa2, 0x09,
	0xa4, 0xf1, 0x4e, 0xed, 0x86, 0x96, 0x1f, 0x2a, 0x15, 0x81, 0x04, 0x22, 0xa1, 0x96, 0x9a, 0x72,
	0xe1, 0x52, 0xad, 0xed, 0xc9, 0x66, 0x1b, 0x67, 0xc7, 0xdd, 0x5d, 0x07, 0xa2, 0xc8, 0x17, 0x24,
	0xee, 0x48, 0x1c, 0xb8, 0x14, 0x21, 0x71, 0xe0, 0x08, 0xe2, 0x80, 0x84, 0x38, 0x21, 0x4e, 0x3d,
	0x56, 0xe2, 0xc2, 0x09, 0xa1, 0x84, 0x3f, 0x04, 0xcd, 0xcc, 0xdb, 0x78, 0xd7, 0xde, 0x5d, 0xbb,
	0x69, 0x6e, 0x9e, 0x9d, 0xf7, 0xe6, 0x7d, 0xef, 0x7b, 0xdf, 0xbc, 0x37, 0x86, 0x17, 0xda, 0xf6,
	0x1e, 0xf7, 0x6b, 0x6c, 0xb7, 0xca, 0xee, 0x77, 0xb9, 0xbf, 0x67, 0x75, 0x7c, 0x11, 0x0a, 0x4a,
	0x5d, 0xdf, 0x0d, 0xed, 0x1d, 0xd1, 0xb2, 0xf4, 0xbe, 0xb5, 0x5b, 0x35, 0xce, 0x38, 0xc2, 0x11,
	0x6a, 0x9b, 0xc9, 0x5f, 0xda, 0xd2, 0x38, 0xef, 0x08, 0xe1, 0xb4, 0x39, 0xb3, 0x3b, 0x2e, 0xb3,
	0x3d, 0x4f, 0x84, 0x76, 0xe8, 0x0a, 0x2f, 0xc0, 0xdd, 0xb3, 0xfd, 0xe3, 0xf1, 0x20, 0xfd, 0x7d,
	0xa9, 0x29, 0x82, 0x1d, 0x11, 0xb0, 0x86, 0x1d, 0x70, 0x1d, 0x98, 0xed, 0x56, 0x1b, 0x3c, 0xb4,
	0xab, 0xac, 0x63, 0x3b, 0xae, 0xa7, 0x0e, 0xd1, 0xb6, 0xe6, 0x0a, 0xbc, 0x78, 0x5b, 0x5a, 0xbc,
	0xd7, 0xb6, 0x83, 0x60, 0x5d, 0xf8, 0x37, 0xd7, 0xef, 0xd4, 0xf9, 0xfd, 0x2e, 0x0f, 0x42, 0x3a,
	0x07, 0x4f, 0x35, 0xe5, 0xd7, 0xbb, 0x6e, 0x6b, 0x96, 0x5c, 0x20, 0xaf, 0x9e, 0xae, 0x9f, 0x52,
	0xeb, 0x8d, 0x96, 0x79, 0x1b, 0x66, 0x87, 0xbd, 0x82, 0x8e, 0xf0, 0x02, 0x4e, 0x5f, 0x87, 0x92,
	0x32, 0x53, 0x3e, 0xd3, 0xb5, 0x79, 0x6b, 0x38, 0x5b, 0x2b, 0xee, 0xa7, 0xad, 0xcd, 0x26, 0xcc,
	0xf5, 0x8f, 0xe4, 0x03, 0x50, 0xd6, 0x01, 0xfa, 0xc8, 0xf1, 0xe0, 0x05, 0x4b, 0xa7, 0x69, 0xc9,
	0x34, 0x2d, 0xcd, 0x2f, 0xa6, 0x69, 0x7d, 0x6c, 0x3b, 0x1c, 0x7d, 0xeb, 0x31, 0x4f, 0xf3, 0x47,
	0x02, 0x46, 0x5a, 0x14, 0x84, 0x7e, 0x03, 0x74, 0x86, 0x5c, 0x82, 0x2f, 0x8e, 0x01, 0x7e, 0x75,
	0xf2, 0xe1, 0x3f, 0xf3, 0x13, 0xf5, 0xc8, 0x8b, 0x7e, 0x90, 0xc0, 0x59, 0x50, 0x38, 0x17, 0x47,
	0xe2, 0xd4, 0xd1, 0x13, 0x40, 0xef, 0x61, 0x59, 0xee, 0x88, 0x6d, 0xee, 0x0d, 0x95, 0x25, 0xe8,
	0xd8, 0x4d, 0x1e, 0x95, 0x65, 0xb2, 0x7e, 0x4a, 0xad, 0x37, 0x5a, 0x89, 0x8a, 0x15, 0x12, 0x15,
	0x93, 0x5b, 0xa1, 0x3c, 0x4b, 0x6e, 0x15, 0xf5, 0x96, 0x5a, 0x6f, 0xb4, 0xcc, 0xcb, 0x58, 0xcc,
	0x44, 0x2c, 0x64, 0xe4, 0x0c, 0x94, 0xc4, 0xe7, 0x1e, 0xf7, 0x51, 0x00, 0x7a, 0x61, 0x3e, 0x20,
	0x70, 0x5e, 0xd3, 0x28, 0xda, 0x6d, 0xde, 0x94, 0x88, 0x4f, 0x02, 0x63, 0xb2, 0xca, 0xc5, 0x63,
	0x57, 0xf9, 0x4f, 0x02, 0x2f, 0x65, 0xc0, 0xc3, 0xb4, 0xb2, 0xa5, 0x4d, 0xaf, 0xc3, 0x94, 0x22,
	0x26, 0x98, 0x2d, 0x64, 0x4b, 0x20, 0x46, 0x15, 0x4a, 0x00, 0x9d, 0x06, 0x14, 0x50, 0x3c, 0xbe,
	0x02, 0x7e, 0x25, 0x30, 0xdf, 0x2f, 0x4b, 0x70, 0x6b, 0xf3, 0x96, 0xa4, 0xfe, 0x24, 0x68, 0x3e,
	0xaa, 0x69, 0x31, 0x56, 0xd3, 0x01, 0xf2, 0x27, 0x8f, 0x4d, 0xfe, 0x2f, 0x04, 0x2e, 0x64, 0xe3,
	0x46, 0xfe, 0xdf, 0x3f, 0x22, 0x59, 0xdf, 0xb3, 0x85, 0x51, 0x24, 0xef, 0xa9, 0x53, 0x72, 0xb9,
	0x7e, 0x82, 0xdb, 0x76, 0x15, 0x7b, 0xcf, 0xaa, 0x1d, 0xf0, 0x4f, 0x7d, 0x77, 0xec, 0x36, 0x78,
	0x0d, 0xbb, 0xc9, 0x80, 0x5f, 0x5f, 0x64, 0x12, 0xc4, 0xdd, 0xae, 0xef, 0x46, 0x8e, 0x0d, 0x6d,
	0x68, 0xee, 0xa0, 0xa3, 0x4a, 0x31, 0x2d, 0xe2, 0xc9, 0xde, 0xf0, 0xb7, 0xe0, 0x5c, 0x6a, 0x38,
	0x04, 0x7a, 0x0e, 0x4e, 0x6b, 0xcf, 0x3e, 0x52, 0x7d, 0x94, 0x84, 0x6a, 0xc1, 0x73, 0xca, 0xf7,
	0x13, 0x89, 0x60, 0x34, 0x42, 0x73, 0x0d, 0x68, 0xdc, 0x1e, 0x43, 0x30, 0x28, 0x29, 0x03, 0xec,
	0xdd, 0x73, 0x69, 0xf5, 0xd6, 0x1e, 0xda, 0xce, 0xfc, 0x02, 0x9b, 0x92, 0xfa, 0x88, 0x22, 0x8a,
	0xa2, 0xa7, 0x36, 0xa5, 0x01, 0x01, 0x17, 0x8e, 0x2d, 0xe0, 0xef, 0x08, 0xaa, 0x21, 0x19, 0x1a,
	0x13, 0xb9, 0x06, 0x53, 0x0a, 0x60, 0xa4, 0xdc, 0xec, 0x4c, 0x22, 0xb1, 0x6a, 0xf3, 0x93, 0x13,
	0xeb, 0x4d, 0x84, 0xf7, 0x51, 0x6d, 0xb5, 0x2d, 0x9a, 0xdb, 0x1f, 0x72, 0xbb, 0xd5, 0xa7, 0x26,
	0x47, 0x3a, 0x67, 0x61, 0x6a, 0x8b, 0xbb, 0xce, 0x56, 0xa8, 0x82, 0x4f, 0xd6, 0x71, 0x65, 0xae,
	0xa0, 0x16, 0x07, 0xce, 0xc3, 0x7c, 0x95, 0x97, 0xfc, 0x82, 0x72, 0xc3, 0x55, 0xed, 0x87, 0x19,
	0x28, 0x29, 0x37, 0xfa, 0x80, 0xc0, 0x74, 0x6c, 0x24, 0xd2, 0x4b, 0x69, 0x8c, 0x64, 0xbc, 0x31,
	0x8c, 0xe5, 0xf1, 0x8c, 0x35, 0x18, 0xb3, 0xf6, 0xe5, 0x5f, 0xff, 0x7d, 0x53, 0x58, 0xa6, 0x4b,
	0x2c, 0xf2, 0x62, 0xfd, 0x27, 0x90, 0xb7, 0x19, 0x32, 0x9c, 0xc3, 0x6c, 0x3f, 0xba, 0x24, 0x3d,
	0xfa, 0x2d, 0x81, 0x99, 0xc4, 0xb4, 0xa7, 0x95, 0xfc, 0x98, 0x03, 0x6f, 0x0f, 0xc3, 0x1a, 0xd7,
	0x1c, 0x41, 0x2e, 0x2a, 0x90, 0x2f, 0xd3, 0xf9, 0x11, 0x20, 0xe9, 0xcf, 0x04, 0xa6, 0x63, 0x3d,
	0x2e, 0x87, 0xb8, 0xe1, 0x57, 0x40, 0x0e, 0x71, 0x29, 0x63, 0xdc, 0x5c, 0x53, 0x98, 0x6e, 0xd0,
	0xeb, 0x59, 0x98, 0xbc, 0xcd, 0x30, 0x60, 0xfb, 0x91, 0x74, 0x7a, 0x31, 0x02, 0xd9, 0x7e, 0xd4,
	0x55, 0x7a, 0xf4, 0x77, 0x02, 0xcf, 0x0e, 0xce, 0x54, 0x7a, 0x39, 0x9b, 0x9f, 0xf4, 0xd7, 0x81,
	0x51, 0x7d, 0x0c, 0x0f, 0x4c, 0xe0, 0x5d, 0x95, 0xc0, 0xdb, 0xf4, 0xcd, 0x4c, 0x52, 0x8f, 0x3c,
	0x33, 0xf2, 0xa0, 0x7f, 0x10, 0x78, 0x3e, 0x65, 0x26, 0xd1, 0x2b, 0xf9, 0x4c, 0xa6, 0x4e, 0x5e,
	0x63, 0xe5, 0xf1, 0x9c, 0x30, 0x8b, 0x77, 0x54, 0x16, 0x6f, 0xd0, 0xab, 0x19, 0x59, 0x64, 0x96,
	0x40, 0x75, 0xb8, 0x1e, 0xfd, 0x9e, 0xc0, 0x4c, 0x62, 0xd6, 0xe4, 0x68, 0x39, 0x6d, 0x96, 0xe5,
	0x68, 0x39, 0x75, 0x84, 0x99, 0x4c, 0x01, 0x7e, 0x8d, 0x2e, 0x66, 0xd1, 0xde, 0xf5, 0xdd, 0xc4,
	0x6d, 0xfb, 0x8d, 0xc0, 0x33, 0xc9, 0x29, 0x43, 0xad, 0x7c, 0xaa, 0x86, 0x30, 0xb2, 0xb1, 0xed,
	0xc7, 0x15, 0xb7, 0x06, 0x39, 0x4a, 0xdc, 0x5f, 0x11, 0x28, 0xa9, 0xc6, 0x4d, 0x2f, 0x66, 0x22,
	0x88, 0x0f, 0x41, 0x63, 0x61, 0x94, 0x19, 0xe2, 0xab, 0x28, 0x7c, 0x8b, 0xf4, 0x62, 0x1a, 0x3e,
	0x3d, 0x1d, 0x62, 0xe8, 0x64, 0xc3, 0x7a, 0x3a, 0x3e, 0x7a, 0xe8, 0x72, 0x7e, 0x9c, 0xe4, 0x70,
	0x34, 0x2a, 0x63, 0x5a, 0x23, 0xb8, 0x25, 0x05, 0xee, 0x15, 0x6a, 0xe6, 0x81, 0x43, 0xf9, 0xfd,
	0x44, 0x60, 0x26, 0x31, 0x25, 0x72, 0xe4, 0x97, 0x36, 0x9d, 0x72, 0xe4, 0x97, 0x3a, 0x7c, 0xf2,
	0xef, 0x4b, 0xbb, 0xd6, 0x90, 0x2e, 0x7a, 0x1e, 0x25, 0xeb, 0xab, 0x27, 0x5b, 0x6f, 0x75, 0xed,
	0xe1, 0x41, 0x99, 0x3c, 0x3a, 0x28, 0x93, 0x7f, 0x0f, 0xca, 0xe4, 0xeb, 0xc3, 0xf2, 0xc4, 0xa3,
	0xc3, 0xf2, 0xc4, 0xdf, 0x87, 0xe5, 0x89, 0xcf, 0x2e, 0x39, 0x6e, 0xb8, 0xd5, 0x6d, 0x58, 0x4d,
	0xb1, 0xc3, 0x1a, 0xae, 0xed, 0xdd, 0x73, 0xb9, 0xed, 0x1e, 0x45, 0xa9, 0x04, 0xad, 0xed, 0x8a,
	0x23, 0x30, 0x58, 0x63, 0x4a, 0xfd, 0x55, 0xbe, 0xf2, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe6,
	0x43, 0x02, 0x0f, 0xcf, 0x0f, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// ClassForNFT queries a native class mapping.
	ClassForNFT(ctx context.Context, in *QueryClassForNFTRequest, opts ...grpc.CallOption) (*QueryClassForNFTResponse, error)
	// ClassesForNFT queries all native NFT Class mappings.
	ClassesForNFT(ctx context.Context, in *QueryClassesForNFTRequest, opts ...grpc.CallOption) (*QueryClassesForNFTResponse, error)
	// TokenForNFT queries a native NFT mapping.
	TokenForNFT(ctx context.Context, in *QueryTokenForNFTRequest, opts ...grpc.CallOption) (*QueryTokenForNFTResponse, error)
	// CollectionForNFT queries all native NFT mappings under a class of a space.
	CollectionForNFT(ctx context.Context, in *QueryCollectionForNFTRequest, opts ...grpc.CallOption) (*QueryCollectionForNFTResponse, error)
	// TokensOfOwnerForNFT queries all native NFT mappings owned by an address.
	TokensOfOwnerForNFT(ctx context.Context, in *QueryTokensOfOwnerForNFTRequest, opts ...grpc.CallOption) (*QueryTokensOfOwnerForNFTResponse, error)
	// BaseUriForNFT queries the base URI of a native NFT Class.
	BaseUriForNFT(ctx context.Context, in *QueryBaseUriForNFTRequest, opts ...grpc.CallOption) (*QueryBaseUriForNFTResponse, error)
	// TokenUriForNFT queries the URI of a native NFT.
	TokenUriForNFT(ctx context.Context, in *QueryTokenUriForNFTRequest, opts ...grpc.CallOption) (*QueryTokenUriForNFTResponse, error)
	// Space queries a space.
	Space(ctx context.Context, in *QuerySpaceRequest, opts ...grpc.CallOption) (*QuerySpaceResponse, error)
	// SpaceOfOwner queries all spaces owned by an address.
	SpaceOfOwner(ctx context.Context, in *QuerySpaceOfOwnerRequest, opts ...grpc.CallOption) (*QuerySpaceOfOwnerResponse, error)
	// L2BlockHeader queries a layer2 block header.
	L2BlockHeader(ctx context.Context, in *QueryL2BlockHeaderRequest, opts ...grpc.CallOption) (*QueryL2BlockHeaderResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) ClassForNFT(ctx context.Context, in *QueryClassForNFTRequest, opts ...grpc.CallOption) (*QueryClassForNFTResponse, error) {
	out := new(QueryClassForNFTResponse)
	err := c.cc.Invoke(ctx, "/iritamod.layer2.v1.Query/ClassForNFT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ClassesForNFT(ctx context.Context, in *QueryClassesForNFTRequest, opts ...grpc.CallOption) (*QueryClassesForNFTResponse, error) {
	out := new(QueryClassesForNFTResponse)
	err := c.cc.Invoke(ctx, "/iritamod.layer2.v1.Query/ClassesForNFT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TokenForNFT(ctx context.Context, in *QueryTokenForNFTRequest, opts ...grpc.CallOption) (*QueryTokenForNFTResponse, error) {
	out := new(QueryTokenForNFTResponse)
	err := c.cc.Invoke(ctx, "/iritamod.layer2.v1.Query/TokenForNFT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CollectionForNFT(ctx context.Context, in *QueryCollectionForNFTRequest, opts ...grpc.CallOption) (*QueryCollectionForNFTResponse, error) {
	out := new(QueryCollectionForNFTResponse)
	err := c.cc.Invoke(ctx, "/iritamod.layer2.v1.Query/CollectionForNFT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TokensOfOwnerForNFT(ctx context.Context, in *QueryTokensOfOwnerForNFTRequest, opts ...grpc.CallOption) (*QueryTokensOfOwnerForNFTResponse, error) {
	out := new(QueryTokensOfOwnerForNFTResponse)
	err := c.cc.Invoke(ctx, "/iritamod.layer2.v1.Query/TokensOfOwnerForNFT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BaseUriForNFT(ctx context.Context, in *QueryBaseUriForNFTRequest, opts ...grpc.CallOption) (*QueryBaseUriForNFTResponse, error) {
	out := new(QueryBaseUriForNFTResponse)
	err := c.cc.Invoke(ctx, "/iritamod.layer2.v1.Query/BaseUriForNFT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TokenUriForNFT(ctx context.Context, in *QueryTokenUriForNFTRequest, opts ...grpc.CallOption) (*QueryTokenUriForNFTResponse, error) {
	out := new(QueryTokenUriForNFTResponse)
	err := c.cc.Invoke(ctx, "/iritamod.layer2.v1.Query/TokenUriForNFT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Space(ctx context.Context, in *QuerySpaceRequest, opts ...grpc.CallOption) (*QuerySpaceResponse, error) {
	out := new(QuerySpaceResponse)
	err := c.cc.Invoke(ctx, "/iritamod.layer2.v1.Query/Space", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SpaceOfOwner(ctx context.Context, in *QuerySpaceOfOwnerRequest, opts ...grpc.CallOption) (*QuerySpaceOfOwnerResponse, error) {
	out := new(QuerySpaceOfOwnerResponse)
	err := c.cc.Invoke(ctx, "/iritamod.layer2.v1.Query/SpaceOfOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) L2BlockHeader(ctx context.Context, in *QueryL2BlockHeaderRequest, opts ...grpc.CallOption) (*QueryL2BlockHeaderResponse, error) {
	out := new(QueryL2BlockHeaderResponse)
	err := c.cc.Invoke(ctx, "/iritamod.layer2.v1.Query/L2BlockHeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// ClassForNFT queries a native class mapping.
	ClassForNFT(context.Context, *QueryClassForNFTRequest) (*QueryClassForNFTResponse, error)
	// ClassesForNFT queries all native NFT Class mappings.
	ClassesForNFT(context.Context, *QueryClassesForNFTRequest) (*QueryClassesForNFTResponse, error)
	// TokenForNFT queries a native NFT mapping.
	TokenForNFT(context.Context, *QueryTokenForNFTRequest) (*QueryTokenForNFTResponse, error)
	// CollectionForNFT queries all native NFT mappings under a class of a space.
	CollectionForNFT(context.Context, *QueryCollectionForNFTRequest) (*QueryCollectionForNFTResponse, error)
	// TokensOfOwnerForNFT queries all native NFT mappings owned by an address.
	TokensOfOwnerForNFT(context.Context, *QueryTokensOfOwnerForNFTRequest) (*QueryTokensOfOwnerForNFTResponse, error)
	// BaseUriForNFT queries the base URI of a native NFT Class.
	BaseUriForNFT(context.Context, *QueryBaseUriForNFTRequest) (*QueryBaseUriForNFTResponse, error)
	// TokenUriForNFT queries the URI of a native NFT.
	TokenUriForNFT(context.Context, *QueryTokenUriForNFTRequest) (*QueryTokenUriForNFTResponse, error)
	// Space queries a space.
	Space(context.Context, *QuerySpaceRequest) (*QuerySpaceResponse, error)
	// SpaceOfOwner queries all spaces owned by an address.
	SpaceOfOwner(context.Context, *QuerySpaceOfOwnerRequest) (*QuerySpaceOfOwnerResponse, error)
	// L2BlockHeader queries a layer2 block header.
	L2BlockHeader(context.Context, *QueryL2BlockHeaderRequest) (*QueryL2BlockHeaderResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) ClassForNFT(ctx context.Context, req *QueryClassForNFTRequest) (*QueryClassForNFTResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClassForNFT not implemented")
}
func (*UnimplementedQueryServer) ClassesForNFT(ctx context.Context, req *QueryClassesForNFTRequest) (*QueryClassesForNFTResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClassesForNFT not implemented")
}
func (*UnimplementedQueryServer) TokenForNFT(ctx context.Context, req *QueryTokenForNFTRequest) (*QueryTokenForNFTResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenForNFT not implemented")
}
func (*UnimplementedQueryServer) CollectionForNFT(ctx context.Context, req *QueryCollectionForNFTRequest) (*QueryCollectionForNFTResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectionForNFT not implemented")
}
func (*UnimplementedQueryServer) TokensOfOwnerForNFT(ctx context.Context, req *QueryTokensOfOwnerForNFTRequest) (*QueryTokensOfOwnerForNFTResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokensOfOwnerForNFT not implemented")
}
func (*UnimplementedQueryServer) BaseUriForNFT(ctx context.Context, req *QueryBaseUriForNFTRequest) (*QueryBaseUriForNFTResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BaseUriForNFT not implemented")
}
func (*UnimplementedQueryServer) TokenUriForNFT(ctx context.Context, req *QueryTokenUriForNFTRequest) (*QueryTokenUriForNFTResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenUriForNFT not implemented")
}
func (*UnimplementedQueryServer) Space(ctx context.Context, req *QuerySpaceRequest) (*QuerySpaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Space not implemented")
}
func (*UnimplementedQueryServer) SpaceOfOwner(ctx context.Context, req *QuerySpaceOfOwnerRequest) (*QuerySpaceOfOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpaceOfOwner not implemented")
}
func (*UnimplementedQueryServer) L2BlockHeader(ctx context.Context, req *QueryL2BlockHeaderRequest) (*QueryL2BlockHeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method L2BlockHeader not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_ClassForNFT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryClassForNFTRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ClassForNFT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iritamod.layer2.v1.Query/ClassForNFT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ClassForNFT(ctx, req.(*QueryClassForNFTRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ClassesForNFT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryClassesForNFTRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ClassesForNFT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iritamod.layer2.v1.Query/ClassesForNFT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ClassesForNFT(ctx, req.(*QueryClassesForNFTRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TokenForNFT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTokenForNFTRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TokenForNFT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iritamod.layer2.v1.Query/TokenForNFT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TokenForNFT(ctx, req.(*QueryTokenForNFTRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CollectionForNFT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCollectionForNFTRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CollectionForNFT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iritamod.layer2.v1.Query/CollectionForNFT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CollectionForNFT(ctx, req.(*QueryCollectionForNFTRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TokensOfOwnerForNFT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTokensOfOwnerForNFTRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TokensOfOwnerForNFT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iritamod.layer2.v1.Query/TokensOfOwnerForNFT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TokensOfOwnerForNFT(ctx, req.(*QueryTokensOfOwnerForNFTRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BaseUriForNFT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBaseUriForNFTRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BaseUriForNFT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iritamod.layer2.v1.Query/BaseUriForNFT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BaseUriForNFT(ctx, req.(*QueryBaseUriForNFTRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TokenUriForNFT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTokenUriForNFTRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TokenUriForNFT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iritamod.layer2.v1.Query/TokenUriForNFT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TokenUriForNFT(ctx, req.(*QueryTokenUriForNFTRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Space_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Space(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iritamod.layer2.v1.Query/Space",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Space(ctx, req.(*QuerySpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SpaceOfOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySpaceOfOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SpaceOfOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iritamod.layer2.v1.Query/SpaceOfOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SpaceOfOwner(ctx, req.(*QuerySpaceOfOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_L2BlockHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryL2BlockHeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).L2BlockHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iritamod.layer2.v1.Query/L2BlockHeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).L2BlockHeader(ctx, req.(*QueryL2BlockHeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "iritamod.layer2.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClassForNFT",
			Handler:    _Query_ClassForNFT_Handler,
		},
		{
			MethodName: "ClassesForNFT",
			Handler:    _Query_ClassesForNFT_Handler,
		},
		{
			MethodName: "TokenForNFT",
			Handler:    _Query_TokenForNFT_Handler,
		},
		{
			MethodName: "CollectionForNFT",
			Handler:    _Query_CollectionForNFT_Handler,
		},
		{
			MethodName: "TokensOfOwnerForNFT",
			Handler:    _Query_TokensOfOwnerForNFT_Handler,
		},
		{
			MethodName: "BaseUriForNFT",
			Handler:    _Query_BaseUriForNFT_Handler,
		},
		{
			MethodName: "TokenUriForNFT",
			Handler:    _Query_TokenUriForNFT_Handler,
		},
		{
			MethodName: "Space",
			Handler:    _Query_Space_Handler,
		},
		{
			MethodName: "SpaceOfOwner",
			Handler:    _Query_SpaceOfOwner_Handler,
		},
		{
			MethodName: "L2BlockHeader",
			Handler:    _Query_L2BlockHeader_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "layer2/v1/query.proto",
}

func (m *QueryClassForNFTRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClassForNFTRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryClassForNFTRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryClassForNFTResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClassForNFTResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryClassForNFTResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Class != nil {
		{
			size, err := m.Class.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryClassesForNFTRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClassesForNFTRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryClassesForNFTRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryClassesForNFTResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClassesForNFTResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryClassesForNFTResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Classes) > 0 {
		for iNdEx := len(m.Classes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Classes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokenForNFTRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenForNFTRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenForNFTRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenId) > 0 {
		i -= len(m.TokenId)
		copy(dAtA[i:], m.TokenId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TokenId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0x12
	}
	if m.SpaceId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.SpaceId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokenForNFTResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenForNFTResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenForNFTResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCollectionForNFTRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCollectionForNFTRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCollectionForNFTRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0x12
	}
	if m.SpaceId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.SpaceId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryCollectionForNFTResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCollectionForNFTResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCollectionForNFTResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Tokens) > 0 {
		for iNdEx := len(m.Tokens) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tokens[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokensOfOwnerForNFTRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokensOfOwnerForNFTRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokensOfOwnerForNFTRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0x12
	}
	if m.SpaceId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.SpaceId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokensOfOwnerForNFTResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokensOfOwnerForNFTResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokensOfOwnerForNFTResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Tokens) > 0 {
		for iNdEx := len(m.Tokens) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tokens[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryBaseUriForNFTRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBaseUriForNFTRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBaseUriForNFTRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBaseUriForNFTResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBaseUriForNFTResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBaseUriForNFTResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BaseUri) > 0 {
		i -= len(m.BaseUri)
		copy(dAtA[i:], m.BaseUri)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BaseUri)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokenUriForNFTRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenUriForNFTRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenUriForNFTRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenId) > 0 {
		i -= len(m.TokenId)
		copy(dAtA[i:], m.TokenId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TokenId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0x12
	}
	if m.SpaceId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.SpaceId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokenUriForNFTResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenUriForNFTResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenUriForNFTResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenUri) > 0 {
		i -= len(m.TokenUri)
		copy(dAtA[i:], m.TokenUri)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TokenUri)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySpaceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySpaceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySpaceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SpaceId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.SpaceId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QuerySpaceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySpaceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySpaceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Space != nil {
		{
			size, err := m.Space.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySpaceOfOwnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySpaceOfOwnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySpaceOfOwnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySpaceOfOwnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySpaceOfOwnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySpaceOfOwnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Spaces) > 0 {
		for iNdEx := len(m.Spaces) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Spaces[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryL2BlockHeaderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryL2BlockHeaderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryL2BlockHeaderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if m.SpaceId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.SpaceId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryL2BlockHeaderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryL2BlockHeaderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryL2BlockHeaderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Header) > 0 {
		i -= len(m.Header)
		copy(dAtA[i:], m.Header)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Header)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryClassForNFTRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryClassForNFTResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Class != nil {
		l = m.Class.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryClassesForNFTRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryClassesForNFTResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Classes) > 0 {
		for _, e := range m.Classes {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTokenForNFTRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SpaceId != 0 {
		n += 1 + sovQuery(uint64(m.SpaceId))
	}
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TokenId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTokenForNFTResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCollectionForNFTRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SpaceId != 0 {
		n += 1 + sovQuery(uint64(m.SpaceId))
	}
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCollectionForNFTResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Tokens) > 0 {
		for _, e := range m.Tokens {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTokensOfOwnerForNFTRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SpaceId != 0 {
		n += 1 + sovQuery(uint64(m.SpaceId))
	}
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTokensOfOwnerForNFTResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tokens) > 0 {
		for _, e := range m.Tokens {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBaseUriForNFTRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBaseUriForNFTResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BaseUri)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTokenUriForNFTRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SpaceId != 0 {
		n += 1 + sovQuery(uint64(m.SpaceId))
	}
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TokenId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTokenUriForNFTResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TokenUri)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySpaceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SpaceId != 0 {
		n += 1 + sovQuery(uint64(m.SpaceId))
	}
	return n
}

func (m *QuerySpaceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Space != nil {
		l = m.Space.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySpaceOfOwnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySpaceOfOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Spaces) > 0 {
		for _, e := range m.Spaces {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryL2BlockHeaderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SpaceId != 0 {
		n += 1 + sovQuery(uint64(m.SpaceId))
	}
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	return n
}

func (m *QueryL2BlockHeaderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Header)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryClassForNFTRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryClassForNFTRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryClassForNFTRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryClassForNFTResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryClassForNFTResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryClassForNFTResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Class", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Class == nil {
				m.Class = &ClassForNFT{}
			}
			if err := m.Class.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryClassesForNFTRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryClassesForNFTRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryClassesForNFTRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryClassesForNFTResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryClassesForNFTResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryClassesForNFTResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Classes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Classes = append(m.Classes, ClassForNFT{})
			if err := m.Classes[len(m.Classes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenForNFTRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenForNFTRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenForNFTRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceId", wireType)
			}
			m.SpaceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpaceId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenForNFTResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenForNFTResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenForNFTResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCollectionForNFTRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCollectionForNFTRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCollectionForNFTRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceId", wireType)
			}
			m.SpaceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpaceId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCollectionForNFTResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCollectionForNFTResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCollectionForNFTResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tokens = append(m.Tokens, TokenForNFT{})
			if err := m.Tokens[len(m.Tokens)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokensOfOwnerForNFTRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokensOfOwnerForNFTRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokensOfOwnerForNFTRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceId", wireType)
			}
			m.SpaceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpaceId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokensOfOwnerForNFTResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokensOfOwnerForNFTResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokensOfOwnerForNFTResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tokens = append(m.Tokens, TokenForNFTByOwner{})
			if err := m.Tokens[len(m.Tokens)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBaseUriForNFTRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBaseUriForNFTRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBaseUriForNFTRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBaseUriForNFTResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBaseUriForNFTResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBaseUriForNFTResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenUriForNFTRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenUriForNFTRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenUriForNFTRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceId", wireType)
			}
			m.SpaceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpaceId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenUriForNFTResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenUriForNFTResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenUriForNFTResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySpaceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySpaceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySpaceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceId", wireType)
			}
			m.SpaceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpaceId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySpaceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySpaceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySpaceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Space", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Space == nil {
				m.Space = &Space{}
			}
			if err := m.Space.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySpaceOfOwnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySpaceOfOwnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySpaceOfOwnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySpaceOfOwnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySpaceOfOwnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySpaceOfOwnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spaces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Spaces = append(m.Spaces, Space{})
			if err := m.Spaces[len(m.Spaces)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryL2BlockHeaderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryL2BlockHeaderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryL2BlockHeaderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceId", wireType)
			}
			m.SpaceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpaceId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryL2BlockHeaderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryL2BlockHeaderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryL2BlockHeaderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Header = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
