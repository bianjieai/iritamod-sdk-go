// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: layer2/v1/tx.proto

package layer2

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgCreateNFTs defines the Msg/CreateNFTs request type.
type MsgCreateNFTs struct {
	SpaceId uint64        `protobuf:"varint,1,opt,name=space_id,json=spaceId,proto3" json:"space_id,omitempty"`
	ClassId string        `protobuf:"bytes,2,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	Tokens  []TokenForNFT `protobuf:"bytes,3,rep,name=tokens,proto3" json:"tokens"`
	Sender  string        `protobuf:"bytes,4,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgCreateNFTs) Reset()         { *m = MsgCreateNFTs{} }
func (m *MsgCreateNFTs) String() string { return proto.CompactTextString(m) }
func (*MsgCreateNFTs) ProtoMessage()    {}
func (*MsgCreateNFTs) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d60461553a7e624, []int{0}
}
func (m *MsgCreateNFTs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateNFTs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateNFTs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateNFTs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateNFTs.Merge(m, src)
}
func (m *MsgCreateNFTs) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateNFTs) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateNFTs.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateNFTs proto.InternalMessageInfo

func (m *MsgCreateNFTs) GetSpaceId() uint64 {
	if m != nil {
		return m.SpaceId
	}
	return 0
}

func (m *MsgCreateNFTs) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *MsgCreateNFTs) GetTokens() []TokenForNFT {
	if m != nil {
		return m.Tokens
	}
	return nil
}

func (m *MsgCreateNFTs) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

// MsgCreateNFTsResponse defines the Msg/CreateNFTs response type.
type MsgCreateNFTsResponse struct {
}

func (m *MsgCreateNFTsResponse) Reset()         { *m = MsgCreateNFTsResponse{} }
func (m *MsgCreateNFTsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateNFTsResponse) ProtoMessage()    {}
func (*MsgCreateNFTsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d60461553a7e624, []int{1}
}
func (m *MsgCreateNFTsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateNFTsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateNFTsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateNFTsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateNFTsResponse.Merge(m, src)
}
func (m *MsgCreateNFTsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateNFTsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateNFTsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateNFTsResponse proto.InternalMessageInfo

// MsgUpdateNFTs defines the Msg/UpdateNFTs request type.
type MsgUpdateNFTs struct {
	SpaceId uint64        `protobuf:"varint,1,opt,name=space_id,json=spaceId,proto3" json:"space_id,omitempty"`
	ClassId string        `protobuf:"bytes,2,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	Tokens  []TokenForNFT `protobuf:"bytes,3,rep,name=tokens,proto3" json:"tokens"`
	Sender  string        `protobuf:"bytes,4,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgUpdateNFTs) Reset()         { *m = MsgUpdateNFTs{} }
func (m *MsgUpdateNFTs) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateNFTs) ProtoMessage()    {}
func (*MsgUpdateNFTs) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d60461553a7e624, []int{2}
}
func (m *MsgUpdateNFTs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateNFTs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateNFTs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateNFTs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateNFTs.Merge(m, src)
}
func (m *MsgUpdateNFTs) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateNFTs) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateNFTs.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateNFTs proto.InternalMessageInfo

func (m *MsgUpdateNFTs) GetSpaceId() uint64 {
	if m != nil {
		return m.SpaceId
	}
	return 0
}

func (m *MsgUpdateNFTs) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *MsgUpdateNFTs) GetTokens() []TokenForNFT {
	if m != nil {
		return m.Tokens
	}
	return nil
}

func (m *MsgUpdateNFTs) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

// MsgUpdateNFTsResponse defines the Msg/UpdateNFTs response type.
type MsgUpdateNFTsResponse struct {
}

func (m *MsgUpdateNFTsResponse) Reset()         { *m = MsgUpdateNFTsResponse{} }
func (m *MsgUpdateNFTsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateNFTsResponse) ProtoMessage()    {}
func (*MsgUpdateNFTsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d60461553a7e624, []int{3}
}
func (m *MsgUpdateNFTsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateNFTsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateNFTsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateNFTsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateNFTsResponse.Merge(m, src)
}
func (m *MsgUpdateNFTsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateNFTsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateNFTsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateNFTsResponse proto.InternalMessageInfo

// MsgDeleteNFTs defines the Msg/DeleteNFTs request type.
type MsgDeleteNFTs struct {
	SpaceId  uint64   `protobuf:"varint,1,opt,name=space_id,json=spaceId,proto3" json:"space_id,omitempty"`
	ClassId  string   `protobuf:"bytes,2,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	TokenIds []string `protobuf:"bytes,3,rep,name=token_ids,json=tokenIds,proto3" json:"token_ids,omitempty"`
	Sender   string   `protobuf:"bytes,4,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgDeleteNFTs) Reset()         { *m = MsgDeleteNFTs{} }
func (m *MsgDeleteNFTs) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteNFTs) ProtoMessage()    {}
func (*MsgDeleteNFTs) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d60461553a7e624, []int{4}
}
func (m *MsgDeleteNFTs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteNFTs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteNFTs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteNFTs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteNFTs.Merge(m, src)
}
func (m *MsgDeleteNFTs) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteNFTs) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteNFTs.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteNFTs proto.InternalMessageInfo

func (m *MsgDeleteNFTs) GetSpaceId() uint64 {
	if m != nil {
		return m.SpaceId
	}
	return 0
}

func (m *MsgDeleteNFTs) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *MsgDeleteNFTs) GetTokenIds() []string {
	if m != nil {
		return m.TokenIds
	}
	return nil
}

func (m *MsgDeleteNFTs) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

// MsgDeleteNFTsResponse defines the Msg/DeleteNFTs response type.
type MsgDeleteNFTsResponse struct {
}

func (m *MsgDeleteNFTsResponse) Reset()         { *m = MsgDeleteNFTsResponse{} }
func (m *MsgDeleteNFTsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteNFTsResponse) ProtoMessage()    {}
func (*MsgDeleteNFTsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d60461553a7e624, []int{5}
}
func (m *MsgDeleteNFTsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteNFTsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteNFTsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteNFTsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteNFTsResponse.Merge(m, src)
}
func (m *MsgDeleteNFTsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteNFTsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteNFTsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteNFTsResponse proto.InternalMessageInfo

// MsgUpdateClassesForNFT defines the Msg/UpdateClassesForNFT request type.
type MsgUpdateClassesForNFT struct {
	SpaceId            uint64              `protobuf:"varint,1,opt,name=space_id,json=spaceId,proto3" json:"space_id,omitempty"`
	ClassUpdatesForNft []UpdateClassForNFT `protobuf:"bytes,2,rep,name=class_updates_for_nft,json=classUpdatesForNft,proto3" json:"class_updates_for_nft"`
	Sender             string              `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgUpdateClassesForNFT) Reset()         { *m = MsgUpdateClassesForNFT{} }
func (m *MsgUpdateClassesForNFT) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateClassesForNFT) ProtoMessage()    {}
func (*MsgUpdateClassesForNFT) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d60461553a7e624, []int{6}
}
func (m *MsgUpdateClassesForNFT) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateClassesForNFT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateClassesForNFT.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateClassesForNFT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateClassesForNFT.Merge(m, src)
}
func (m *MsgUpdateClassesForNFT) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateClassesForNFT) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateClassesForNFT.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateClassesForNFT proto.InternalMessageInfo

func (m *MsgUpdateClassesForNFT) GetSpaceId() uint64 {
	if m != nil {
		return m.SpaceId
	}
	return 0
}

func (m *MsgUpdateClassesForNFT) GetClassUpdatesForNft() []UpdateClassForNFT {
	if m != nil {
		return m.ClassUpdatesForNft
	}
	return nil
}

func (m *MsgUpdateClassesForNFT) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

// MsgUpdateClassesForNFTResponse defines the Msg/UpdateClassesForNFT response type.
type MsgUpdateClassesForNFTResponse struct {
}

func (m *MsgUpdateClassesForNFTResponse) Reset()         { *m = MsgUpdateClassesForNFTResponse{} }
func (m *MsgUpdateClassesForNFTResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateClassesForNFTResponse) ProtoMessage()    {}
func (*MsgUpdateClassesForNFTResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d60461553a7e624, []int{7}
}
func (m *MsgUpdateClassesForNFTResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateClassesForNFTResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateClassesForNFTResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateClassesForNFTResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateClassesForNFTResponse.Merge(m, src)
}
func (m *MsgUpdateClassesForNFTResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateClassesForNFTResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateClassesForNFTResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateClassesForNFTResponse proto.InternalMessageInfo

// MsgDepositClassForNFT defines the Msg/DepositClassForNFT request type.
type MsgDepositClassForNFT struct {
	SpaceId   uint64 `protobuf:"varint,1,opt,name=space_id,json=spaceId,proto3" json:"space_id,omitempty"`
	ClassId   string `protobuf:"bytes,2,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	BaseUri   string `protobuf:"bytes,3,opt,name=base_uri,json=baseUri,proto3" json:"base_uri,omitempty"`
	Recipient string `protobuf:"bytes,4,opt,name=recipient,proto3" json:"recipient,omitempty"`
	Sender    string `protobuf:"bytes,5,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgDepositClassForNFT) Reset()         { *m = MsgDepositClassForNFT{} }
func (m *MsgDepositClassForNFT) String() string { return proto.CompactTextString(m) }
func (*MsgDepositClassForNFT) ProtoMessage()    {}
func (*MsgDepositClassForNFT) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d60461553a7e624, []int{8}
}
func (m *MsgDepositClassForNFT) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDepositClassForNFT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDepositClassForNFT.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDepositClassForNFT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDepositClassForNFT.Merge(m, src)
}
func (m *MsgDepositClassForNFT) XXX_Size() int {
	return m.Size()
}
func (m *MsgDepositClassForNFT) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDepositClassForNFT.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDepositClassForNFT proto.InternalMessageInfo

func (m *MsgDepositClassForNFT) GetSpaceId() uint64 {
	if m != nil {
		return m.SpaceId
	}
	return 0
}

func (m *MsgDepositClassForNFT) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *MsgDepositClassForNFT) GetBaseUri() string {
	if m != nil {
		return m.BaseUri
	}
	return ""
}

func (m *MsgDepositClassForNFT) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

func (m *MsgDepositClassForNFT) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

// MsgDepositClassForNFTResponse defines the Msg/DepositClassForNFT response type.
type MsgDepositClassForNFTResponse struct {
}

func (m *MsgDepositClassForNFTResponse) Reset()         { *m = MsgDepositClassForNFTResponse{} }
func (m *MsgDepositClassForNFTResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDepositClassForNFTResponse) ProtoMessage()    {}
func (*MsgDepositClassForNFTResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d60461553a7e624, []int{9}
}
func (m *MsgDepositClassForNFTResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDepositClassForNFTResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDepositClassForNFTResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDepositClassForNFTResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDepositClassForNFTResponse.Merge(m, src)
}
func (m *MsgDepositClassForNFTResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDepositClassForNFTResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDepositClassForNFTResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDepositClassForNFTResponse proto.InternalMessageInfo

// MsgWithdrawClassForNFT defines the Msg/WithdrawClassForNFT request type.
type MsgWithdrawClassForNFT struct {
	SpaceId uint64 `protobuf:"varint,1,opt,name=space_id,json=spaceId,proto3" json:"space_id,omitempty"`
	ClassId string `protobuf:"bytes,2,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	Owner   string `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	Sender  string `protobuf:"bytes,4,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgWithdrawClassForNFT) Reset()         { *m = MsgWithdrawClassForNFT{} }
func (m *MsgWithdrawClassForNFT) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawClassForNFT) ProtoMessage()    {}
func (*MsgWithdrawClassForNFT) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d60461553a7e624, []int{10}
}
func (m *MsgWithdrawClassForNFT) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawClassForNFT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawClassForNFT.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawClassForNFT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawClassForNFT.Merge(m, src)
}
func (m *MsgWithdrawClassForNFT) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawClassForNFT) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawClassForNFT.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawClassForNFT proto.InternalMessageInfo

func (m *MsgWithdrawClassForNFT) GetSpaceId() uint64 {
	if m != nil {
		return m.SpaceId
	}
	return 0
}

func (m *MsgWithdrawClassForNFT) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *MsgWithdrawClassForNFT) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgWithdrawClassForNFT) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

// MsgWithdrawClassForNFTResponse defines the Msg/WithdrawClassForNFT response type.
type MsgWithdrawClassForNFTResponse struct {
}

func (m *MsgWithdrawClassForNFTResponse) Reset()         { *m = MsgWithdrawClassForNFTResponse{} }
func (m *MsgWithdrawClassForNFTResponse) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawClassForNFTResponse) ProtoMessage()    {}
func (*MsgWithdrawClassForNFTResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d60461553a7e624, []int{11}
}
func (m *MsgWithdrawClassForNFTResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawClassForNFTResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawClassForNFTResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawClassForNFTResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawClassForNFTResponse.Merge(m, src)
}
func (m *MsgWithdrawClassForNFTResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawClassForNFTResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawClassForNFTResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawClassForNFTResponse proto.InternalMessageInfo

// MsgDepositTokenForNFT defines the Msg/DepositTokenForNFT request type.
type MsgDepositTokenForNFT struct {
	SpaceId uint64 `protobuf:"varint,1,opt,name=space_id,json=spaceId,proto3" json:"space_id,omitempty"`
	ClassId string `protobuf:"bytes,2,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	TokenId string `protobuf:"bytes,3,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	Sender  string `protobuf:"bytes,4,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgDepositTokenForNFT) Reset()         { *m = MsgDepositTokenForNFT{} }
func (m *MsgDepositTokenForNFT) String() string { return proto.CompactTextString(m) }
func (*MsgDepositTokenForNFT) ProtoMessage()    {}
func (*MsgDepositTokenForNFT) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d60461553a7e624, []int{12}
}
func (m *MsgDepositTokenForNFT) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDepositTokenForNFT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDepositTokenForNFT.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDepositTokenForNFT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDepositTokenForNFT.Merge(m, src)
}
func (m *MsgDepositTokenForNFT) XXX_Size() int {
	return m.Size()
}
func (m *MsgDepositTokenForNFT) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDepositTokenForNFT.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDepositTokenForNFT proto.InternalMessageInfo

func (m *MsgDepositTokenForNFT) GetSpaceId() uint64 {
	if m != nil {
		return m.SpaceId
	}
	return 0
}

func (m *MsgDepositTokenForNFT) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *MsgDepositTokenForNFT) GetTokenId() string {
	if m != nil {
		return m.TokenId
	}
	return ""
}

func (m *MsgDepositTokenForNFT) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

// MsgDepositTokenForNFTResponse defines the Msg/DepositTokenForNFT response type.
type MsgDepositTokenForNFTResponse struct {
}

func (m *MsgDepositTokenForNFTResponse) Reset()         { *m = MsgDepositTokenForNFTResponse{} }
func (m *MsgDepositTokenForNFTResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDepositTokenForNFTResponse) ProtoMessage()    {}
func (*MsgDepositTokenForNFTResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d60461553a7e624, []int{13}
}
func (m *MsgDepositTokenForNFTResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDepositTokenForNFTResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDepositTokenForNFTResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDepositTokenForNFTResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDepositTokenForNFTResponse.Merge(m, src)
}
func (m *MsgDepositTokenForNFTResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDepositTokenForNFTResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDepositTokenForNFTResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDepositTokenForNFTResponse proto.InternalMessageInfo

// MsgWithdrawTokenForNFT defines the Msg/WithdrawTokenForNFT request type.
type MsgWithdrawTokenForNFT struct {
	SpaceId uint64 `protobuf:"varint,1,opt,name=space_id,json=spaceId,proto3" json:"space_id,omitempty"`
	ClassId string `protobuf:"bytes,2,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	TokenId string `protobuf:"bytes,3,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	Owner   string `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner,omitempty"`
	Name    string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Uri     string `protobuf:"bytes,6,opt,name=uri,proto3" json:"uri,omitempty"`
	UriHash string `protobuf:"bytes,7,opt,name=uri_hash,json=uriHash,proto3" json:"uri_hash,omitempty"`
	Data    string `protobuf:"bytes,8,opt,name=data,proto3" json:"data,omitempty"`
	Sender  string `protobuf:"bytes,9,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgWithdrawTokenForNFT) Reset()         { *m = MsgWithdrawTokenForNFT{} }
func (m *MsgWithdrawTokenForNFT) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawTokenForNFT) ProtoMessage()    {}
func (*MsgWithdrawTokenForNFT) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d60461553a7e624, []int{14}
}
func (m *MsgWithdrawTokenForNFT) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawTokenForNFT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawTokenForNFT.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawTokenForNFT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawTokenForNFT.Merge(m, src)
}
func (m *MsgWithdrawTokenForNFT) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawTokenForNFT) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawTokenForNFT.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawTokenForNFT proto.InternalMessageInfo

func (m *MsgWithdrawTokenForNFT) GetSpaceId() uint64 {
	if m != nil {
		return m.SpaceId
	}
	return 0
}

func (m *MsgWithdrawTokenForNFT) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *MsgWithdrawTokenForNFT) GetTokenId() string {
	if m != nil {
		return m.TokenId
	}
	return ""
}

func (m *MsgWithdrawTokenForNFT) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgWithdrawTokenForNFT) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgWithdrawTokenForNFT) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *MsgWithdrawTokenForNFT) GetUriHash() string {
	if m != nil {
		return m.UriHash
	}
	return ""
}

func (m *MsgWithdrawTokenForNFT) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *MsgWithdrawTokenForNFT) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

// MsgWithdrawTokenForNFTResponse defines the Msg/WithdrawTokenForNFT response type.
type MsgWithdrawTokenForNFTResponse struct {
}

func (m *MsgWithdrawTokenForNFTResponse) Reset()         { *m = MsgWithdrawTokenForNFTResponse{} }
func (m *MsgWithdrawTokenForNFTResponse) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawTokenForNFTResponse) ProtoMessage()    {}
func (*MsgWithdrawTokenForNFTResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d60461553a7e624, []int{15}
}
func (m *MsgWithdrawTokenForNFTResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawTokenForNFTResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawTokenForNFTResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawTokenForNFTResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawTokenForNFTResponse.Merge(m, src)
}
func (m *MsgWithdrawTokenForNFTResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawTokenForNFTResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawTokenForNFTResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawTokenForNFTResponse proto.InternalMessageInfo

// MsgCreateL2Space defines the Msg/CreateL2Space request type.
type MsgCreateL2Space struct {
	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Uri    string `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
	Sender string `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgCreateL2Space) Reset()         { *m = MsgCreateL2Space{} }
func (m *MsgCreateL2Space) String() string { return proto.CompactTextString(m) }
func (*MsgCreateL2Space) ProtoMessage()    {}
func (*MsgCreateL2Space) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d60461553a7e624, []int{16}
}
func (m *MsgCreateL2Space) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateL2Space) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateL2Space.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateL2Space) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateL2Space.Merge(m, src)
}
func (m *MsgCreateL2Space) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateL2Space) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateL2Space.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateL2Space proto.InternalMessageInfo

func (m *MsgCreateL2Space) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgCreateL2Space) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *MsgCreateL2Space) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

// MsgCreateL2SpaceResponse defines the Msg/CreateL2Space response type.
type MsgCreateL2SpaceResponse struct {
	SpaceId uint64 `protobuf:"varint,1,opt,name=space_id,json=spaceId,proto3" json:"space_id,omitempty"`
}

func (m *MsgCreateL2SpaceResponse) Reset()         { *m = MsgCreateL2SpaceResponse{} }
func (m *MsgCreateL2SpaceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateL2SpaceResponse) ProtoMessage()    {}
func (*MsgCreateL2SpaceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d60461553a7e624, []int{17}
}
func (m *MsgCreateL2SpaceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateL2SpaceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateL2SpaceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateL2SpaceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateL2SpaceResponse.Merge(m, src)
}
func (m *MsgCreateL2SpaceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateL2SpaceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateL2SpaceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateL2SpaceResponse proto.InternalMessageInfo

func (m *MsgCreateL2SpaceResponse) GetSpaceId() uint64 {
	if m != nil {
		return m.SpaceId
	}
	return 0
}

// MsgTransferL2Space defines the Msg/TransferL2Space request type.
type MsgTransferL2Space struct {
	SpaceId   uint64 `protobuf:"varint,1,opt,name=space_id,json=spaceId,proto3" json:"space_id,omitempty"`
	Recipient string `protobuf:"bytes,2,opt,name=recipient,proto3" json:"recipient,omitempty"`
	Sender    string `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgTransferL2Space) Reset()         { *m = MsgTransferL2Space{} }
func (m *MsgTransferL2Space) String() string { return proto.CompactTextString(m) }
func (*MsgTransferL2Space) ProtoMessage()    {}
func (*MsgTransferL2Space) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d60461553a7e624, []int{18}
}
func (m *MsgTransferL2Space) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransferL2Space) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransferL2Space.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransferL2Space) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransferL2Space.Merge(m, src)
}
func (m *MsgTransferL2Space) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransferL2Space) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransferL2Space.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransferL2Space proto.InternalMessageInfo

func (m *MsgTransferL2Space) GetSpaceId() uint64 {
	if m != nil {
		return m.SpaceId
	}
	return 0
}

func (m *MsgTransferL2Space) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

func (m *MsgTransferL2Space) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

// MsgTransferL2SpaceResponse defines the Msg/TransferL2Space response type.
type MsgTransferL2SpaceResponse struct {
}

func (m *MsgTransferL2SpaceResponse) Reset()         { *m = MsgTransferL2SpaceResponse{} }
func (m *MsgTransferL2SpaceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTransferL2SpaceResponse) ProtoMessage()    {}
func (*MsgTransferL2SpaceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d60461553a7e624, []int{19}
}
func (m *MsgTransferL2SpaceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransferL2SpaceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransferL2SpaceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransferL2SpaceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransferL2SpaceResponse.Merge(m, src)
}
func (m *MsgTransferL2SpaceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransferL2SpaceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransferL2SpaceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransferL2SpaceResponse proto.InternalMessageInfo

// MsgCreateL2Record defines the Msg/CreateL2Record request type.
type MsgCreateL2BlockHeader struct {
	SpaceId uint64 `protobuf:"varint,1,opt,name=space_id,json=spaceId,proto3" json:"space_id,omitempty"`
	Height  uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Header  string `protobuf:"bytes,3,opt,name=header,proto3" json:"header,omitempty"`
	Sender  string `protobuf:"bytes,4,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgCreateL2BlockHeader) Reset()         { *m = MsgCreateL2BlockHeader{} }
func (m *MsgCreateL2BlockHeader) String() string { return proto.CompactTextString(m) }
func (*MsgCreateL2BlockHeader) ProtoMessage()    {}
func (*MsgCreateL2BlockHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d60461553a7e624, []int{20}
}
func (m *MsgCreateL2BlockHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateL2BlockHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateL2BlockHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateL2BlockHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateL2BlockHeader.Merge(m, src)
}
func (m *MsgCreateL2BlockHeader) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateL2BlockHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateL2BlockHeader.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateL2BlockHeader proto.InternalMessageInfo

func (m *MsgCreateL2BlockHeader) GetSpaceId() uint64 {
	if m != nil {
		return m.SpaceId
	}
	return 0
}

func (m *MsgCreateL2BlockHeader) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *MsgCreateL2BlockHeader) GetHeader() string {
	if m != nil {
		return m.Header
	}
	return ""
}

func (m *MsgCreateL2BlockHeader) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

// MsgCreateL2RecordResponse defines the Msg/CreateL2Record response type.
type MsgCreateL2BlockHeaderResponse struct {
}

func (m *MsgCreateL2BlockHeaderResponse) Reset()         { *m = MsgCreateL2BlockHeaderResponse{} }
func (m *MsgCreateL2BlockHeaderResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateL2BlockHeaderResponse) ProtoMessage()    {}
func (*MsgCreateL2BlockHeaderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d60461553a7e624, []int{21}
}
func (m *MsgCreateL2BlockHeaderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateL2BlockHeaderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateL2BlockHeaderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateL2BlockHeaderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateL2BlockHeaderResponse.Merge(m, src)
}
func (m *MsgCreateL2BlockHeaderResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateL2BlockHeaderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateL2BlockHeaderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateL2BlockHeaderResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreateNFTs)(nil), "iritamod.layer2.v1.MsgCreateNFTs")
	proto.RegisterType((*MsgCreateNFTsResponse)(nil), "iritamod.layer2.v1.MsgCreateNFTsResponse")
	proto.RegisterType((*MsgUpdateNFTs)(nil), "iritamod.layer2.v1.MsgUpdateNFTs")
	proto.RegisterType((*MsgUpdateNFTsResponse)(nil), "iritamod.layer2.v1.MsgUpdateNFTsResponse")
	proto.RegisterType((*MsgDeleteNFTs)(nil), "iritamod.layer2.v1.MsgDeleteNFTs")
	proto.RegisterType((*MsgDeleteNFTsResponse)(nil), "iritamod.layer2.v1.MsgDeleteNFTsResponse")
	proto.RegisterType((*MsgUpdateClassesForNFT)(nil), "iritamod.layer2.v1.MsgUpdateClassesForNFT")
	proto.RegisterType((*MsgUpdateClassesForNFTResponse)(nil), "iritamod.layer2.v1.MsgUpdateClassesForNFTResponse")
	proto.RegisterType((*MsgDepositClassForNFT)(nil), "iritamod.layer2.v1.MsgDepositClassForNFT")
	proto.RegisterType((*MsgDepositClassForNFTResponse)(nil), "iritamod.layer2.v1.MsgDepositClassForNFTResponse")
	proto.RegisterType((*MsgWithdrawClassForNFT)(nil), "iritamod.layer2.v1.MsgWithdrawClassForNFT")
	proto.RegisterType((*MsgWithdrawClassForNFTResponse)(nil), "iritamod.layer2.v1.MsgWithdrawClassForNFTResponse")
	proto.RegisterType((*MsgDepositTokenForNFT)(nil), "iritamod.layer2.v1.MsgDepositTokenForNFT")
	proto.RegisterType((*MsgDepositTokenForNFTResponse)(nil), "iritamod.layer2.v1.MsgDepositTokenForNFTResponse")
	proto.RegisterType((*MsgWithdrawTokenForNFT)(nil), "iritamod.layer2.v1.MsgWithdrawTokenForNFT")
	proto.RegisterType((*MsgWithdrawTokenForNFTResponse)(nil), "iritamod.layer2.v1.MsgWithdrawTokenForNFTResponse")
	proto.RegisterType((*MsgCreateL2Space)(nil), "iritamod.layer2.v1.MsgCreateL2Space")
	proto.RegisterType((*MsgCreateL2SpaceResponse)(nil), "iritamod.layer2.v1.MsgCreateL2SpaceResponse")
	proto.RegisterType((*MsgTransferL2Space)(nil), "iritamod.layer2.v1.MsgTransferL2Space")
	proto.RegisterType((*MsgTransferL2SpaceResponse)(nil), "iritamod.layer2.v1.MsgTransferL2SpaceResponse")
	proto.RegisterType((*MsgCreateL2BlockHeader)(nil), "iritamod.layer2.v1.MsgCreateL2BlockHeader")
	proto.RegisterType((*MsgCreateL2BlockHeaderResponse)(nil), "iritamod.layer2.v1.MsgCreateL2BlockHeaderResponse")
}

func init() { proto.RegisterFile("layer2/v1/tx.proto", fileDescriptor_1d60461553a7e624) }

var fileDescriptor_1d60461553a7e624 = []byte{
	// 852 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x97, 0xcd, 0x6e, 0xd3, 0x4a,
	0x14, 0xc7, 0xe3, 0x24, 0xcd, 0xc7, 0xb9, 0xaa, 0x6e, 0xe5, 0xdb, 0xe6, 0xa6, 0xa6, 0xa4, 0xa1,
	0x02, 0x54, 0x0a, 0x4d, 0xd4, 0x20, 0x96, 0x6c, 0x5a, 0xa8, 0x5a, 0x89, 0x56, 0x28, 0xa4, 0x42,
	0xea, 0x82, 0x68, 0x12, 0x4f, 0x9c, 0xa1, 0xa9, 0x1d, 0xcd, 0x38, 0x2d, 0x5f, 0x0b, 0x1e, 0x81,
	0x07, 0x40, 0xbc, 0x00, 0xe2, 0x3d, 0xba, 0xec, 0x92, 0x15, 0x42, 0xed, 0x96, 0x87, 0x40, 0x1e,
	0xdb, 0x93, 0x71, 0x62, 0x3b, 0x51, 0x2b, 0x24, 0x76, 0x9e, 0x99, 0x93, 0x73, 0x7e, 0xff, 0xff,
	0x7c, 0x1c, 0x05, 0xd4, 0x1e, 0x7a, 0x8b, 0x69, 0xad, 0x7a, 0xb2, 0x51, 0xb5, 0xdf, 0x54, 0xfa,
	0xd4, 0xb2, 0x2d, 0x55, 0x25, 0x94, 0xd8, 0xe8, 0xd8, 0xd2, 0x2b, 0xee, 0x62, 0xe5, 0x64, 0x43,
	0x9b, 0x37, 0x2c, 0xc3, 0xe2, 0xcb, 0x55, 0xe7, 0xcb, 0x8d, 0xd4, 0x0a, 0xc3, 0x5f, 0x7b, 0xa1,
	0x7c, 0x7e, 0xe5, 0xb3, 0x02, 0xb3, 0x7b, 0xcc, 0xd8, 0xa2, 0x18, 0xd9, 0x78, 0x7f, 0xbb, 0xc1,
	0xd4, 0x45, 0xc8, 0xb1, 0x3e, 0x6a, 0xe3, 0x26, 0xd1, 0x8b, 0x4a, 0x59, 0x59, 0x4d, 0xd7, 0xb3,
	0x7c, 0xbc, 0xab, 0x3b, 0x4b, 0xed, 0x1e, 0x62, 0xcc, 0x59, 0x4a, 0x96, 0x95, 0xd5, 0x7c, 0x3d,
	0xcb, 0xc7, 0xbb, 0xba, 0xfa, 0x18, 0x32, 0xb6, 0x75, 0x84, 0x4d, 0x56, 0x4c, 0x95, 0x53, 0xab,
	0xff, 0xd4, 0x96, 0x2b, 0xe3, 0x68, 0x95, 0x86, 0x13, 0xb1, 0x6d, 0xd1, 0xfd, 0xed, 0xc6, 0x66,
	0xfa, 0xec, 0xc7, 0x72, 0xa2, 0xee, 0xfd, 0x48, 0x2d, 0x40, 0x86, 0x61, 0x53, 0xc7, 0xb4, 0x98,
	0xe6, 0x79, 0xbd, 0xd1, 0xca, 0xff, 0xb0, 0x10, 0xa0, 0xab, 0x63, 0xd6, 0xb7, 0x4c, 0x86, 0x7d,
	0xee, 0x83, 0xbe, 0xfe, 0x17, 0x73, 0x0f, 0xe9, 0x04, 0xf7, 0x3b, 0x8e, 0xfd, 0x04, 0xf7, 0xf0,
	0xb5, 0xb0, 0x6f, 0x40, 0x9e, 0x13, 0x34, 0x89, 0xee, 0x92, 0xe7, 0xeb, 0x39, 0x3e, 0xb1, 0xab,
	0x4f, 0x82, 0x1a, 0xd6, 0x16, 0x50, 0x5f, 0x15, 0x28, 0x08, 0xdc, 0x2d, 0xa7, 0x04, 0x66, 0xae,
	0xdc, 0x38, 0xbc, 0x57, 0xb0, 0xe0, 0xe2, 0x0d, 0xf8, 0xef, 0x58, 0xb3, 0x63, 0xd1, 0xa6, 0xd9,
	0xb1, 0x8b, 0x49, 0xee, 0xe4, 0x9d, 0x30, 0x27, 0xa5, 0x12, 0x01, 0x3f, 0x55, 0x9e, 0xc9, 0x5d,
	0xe5, 0x2b, 0x1d, 0x5b, 0x92, 0x91, 0x0a, 0xc8, 0x28, 0x43, 0x29, 0x1c, 0x56, 0xe8, 0xf9, 0xa2,
	0x78, 0x4a, 0xfb, 0x16, 0x23, 0xb6, 0x54, 0xed, 0x8a, 0x6e, 0x2f, 0x42, 0xae, 0x85, 0x18, 0x6e,
	0x0e, 0x28, 0xf1, 0x58, 0xb2, 0xce, 0xf8, 0x80, 0x12, 0x75, 0x09, 0xf2, 0x14, 0xb7, 0x49, 0x9f,
	0x60, 0xd3, 0xf6, 0xec, 0x1e, 0x4e, 0x48, 0x12, 0x66, 0x02, 0x12, 0x96, 0xe1, 0x66, 0x28, 0x9f,
	0x50, 0xf0, 0x81, 0x6f, 0xc8, 0x4b, 0x62, 0x77, 0x75, 0x8a, 0x4e, 0xaf, 0xaf, 0x60, 0x1e, 0x66,
	0xac, 0x53, 0x53, 0x58, 0xe9, 0x0e, 0x22, 0x0f, 0x8a, 0xeb, 0x70, 0x48, 0x75, 0xc1, 0xf7, 0x31,
	0xe0, 0xb0, 0x74, 0x3f, 0xae, 0xee, 0xb0, 0x7f, 0x9e, 0x7d, 0x87, 0xbd, 0xe3, 0x1c, 0x09, 0x19,
	0xf0, 0x50, 0x22, 0x10, 0x8c, 0xbf, 0x94, 0x80, 0x89, 0x7f, 0x14, 0x52, 0xf8, 0x9b, 0x96, 0xfd,
	0x55, 0x21, 0x6d, 0xa2, 0x63, 0xec, 0x6d, 0x3e, 0xff, 0x56, 0xe7, 0x20, 0xe5, 0x1c, 0xa3, 0x0c,
	0x9f, 0x72, 0x3e, 0x9d, 0xb4, 0x03, 0x4a, 0x9a, 0x5d, 0xc4, 0xba, 0xc5, 0xac, 0x9b, 0x76, 0x40,
	0xc9, 0x0e, 0x62, 0x5d, 0x27, 0x81, 0x8e, 0x6c, 0x54, 0xcc, 0xb9, 0x09, 0x9c, 0x6f, 0xc9, 0x8f,
	0x7c, 0xcc, 0xa6, 0x85, 0x19, 0xf2, 0x1c, 0xe6, 0xc4, 0x63, 0xfa, 0xac, 0xf6, 0xc2, 0x11, 0x2c,
	0x10, 0x95, 0x71, 0xc4, 0xe4, 0x10, 0x31, 0xea, 0x2a, 0x3e, 0x82, 0xe2, 0x68, 0x46, 0xbf, 0x5a,
	0x8c, 0xc7, 0x2b, 0x18, 0xd4, 0x3d, 0x66, 0x34, 0x28, 0x32, 0x59, 0x07, 0x53, 0x1f, 0x25, 0x66,
	0x53, 0x02, 0xb7, 0x2c, 0x19, 0x7d, 0xcb, 0x82, 0x74, 0x4b, 0xa0, 0x8d, 0x97, 0x11, 0x6e, 0xbc,
	0xe7, 0xa7, 0xc3, 0x67, 0xdf, 0xec, 0x59, 0xed, 0xa3, 0x1d, 0x8c, 0x74, 0x4c, 0xe3, 0x40, 0x0a,
	0x90, 0xe9, 0x62, 0x62, 0x74, 0x5d, 0x8a, 0x74, 0xdd, 0x1b, 0xb9, 0xf3, 0x48, 0x42, 0x70, 0x47,
	0x13, 0x6e, 0x58, 0x48, 0x71, 0x1f, 0xaf, 0xf6, 0x2d, 0x0f, 0xa9, 0x3d, 0x66, 0xa8, 0x87, 0x00,
	0x52, 0x73, 0xbe, 0x15, 0xf6, 0xa8, 0x06, 0x3a, 0xa4, 0x76, 0x6f, 0x62, 0x88, 0xd8, 0xa2, 0x43,
	0x00, 0xa9, 0x81, 0x46, 0xe5, 0x1e, 0x86, 0x44, 0xe6, 0x1e, 0x6f, 0x74, 0x4e, 0x6e, 0xa9, 0xcb,
	0x45, 0xe5, 0x1e, 0x86, 0x44, 0xe6, 0x1e, 0xef, 0x57, 0xea, 0x00, 0xfe, 0x0b, 0xeb, 0x55, 0x6b,
	0xb1, 0x74, 0x81, 0x58, 0xad, 0x36, 0x7d, 0xac, 0x28, 0x4b, 0x41, 0x0d, 0x69, 0x29, 0xd1, 0xdc,
	0xa3, 0xa1, 0xda, 0xc6, 0xd4, 0xa1, 0xb2, 0xd4, 0xb0, 0x2e, 0x10, 0x25, 0x35, 0x24, 0x36, 0x52,
	0x6a, 0xcc, 0xfb, 0x2e, 0x49, 0x95, 0x9f, 0xcd, 0x09, 0x52, 0xa5, 0xd0, 0x49, 0x52, 0x43, 0x9e,
	0x27, 0x59, 0xaa, 0x5c, 0x74, 0x92, 0x54, 0xb9, 0x6a, 0x6d, 0xfa, 0x58, 0x51, 0xb6, 0x0d, 0xb3,
	0xc1, 0x27, 0xf1, 0x76, 0xec, 0x05, 0xf2, 0xa2, 0xb4, 0x07, 0xd3, 0x44, 0x89, 0x22, 0x04, 0xfe,
	0x1d, 0x7d, 0xee, 0xee, 0x46, 0x24, 0x18, 0x89, 0xd3, 0x2a, 0xd3, 0xc5, 0xc9, 0x36, 0x86, 0x3d,
	0x6a, 0x6b, 0x13, 0x78, 0xa5, 0xd8, 0x48, 0x1b, 0x63, 0xde, 0xab, 0xcd, 0xa7, 0x67, 0x17, 0x25,
	0xe5, 0xfc, 0xa2, 0xa4, 0xfc, 0xbc, 0x28, 0x29, 0x9f, 0x2e, 0x4b, 0x89, 0xf3, 0xcb, 0x52, 0xe2,
	0xfb, 0x65, 0x29, 0x71, 0x78, 0xdf, 0x20, 0x76, 0x77, 0xd0, 0xaa, 0xb4, 0xad, 0xe3, 0x6a, 0x8b,
	0x20, 0xf3, 0x35, 0xc1, 0x88, 0x54, 0xfd, 0x0a, 0xeb, 0x4c, 0x3f, 0x5a, 0x37, 0x2c, 0xef, 0x5f,
	0x49, 0x2b, 0xc3, 0xff, 0x96, 0x3c, 0xfc, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x30, 0x73, 0x67, 0x71,
	0xee, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// CreateNFTs defines a method for creating NFT mappings on Layer2 module.
	CreateNFTs(ctx context.Context, in *MsgCreateNFTs, opts ...grpc.CallOption) (*MsgCreateNFTsResponse, error)
	// UpdateNFTs defines a method for updating NFT mappings on Layer2 module.
	UpdateNFTs(ctx context.Context, in *MsgUpdateNFTs, opts ...grpc.CallOption) (*MsgUpdateNFTsResponse, error)
	// DeleteNFTs defines a method for deleting NFT mappings on Layer2 module.
	DeleteNFTs(ctx context.Context, in *MsgDeleteNFTs, opts ...grpc.CallOption) (*MsgDeleteNFTsResponse, error)
	// UpdateClassesForNFT defines a method for updating NFT Class mappings on Layer2 module.
	UpdateClassesForNFT(ctx context.Context, in *MsgUpdateClassesForNFT, opts ...grpc.CallOption) (*MsgUpdateClassesForNFTResponse, error)
	// DepositClass defines a method for depositing Native NFT Class from Layer1 to Layer2
	DepositClassForNFT(ctx context.Context, in *MsgDepositClassForNFT, opts ...grpc.CallOption) (*MsgDepositClassForNFTResponse, error)
	// WithdrawClass defines a method for withdrawing Native NFT Class from Layer2 to Layer1
	WithdrawClassForNFT(ctx context.Context, in *MsgWithdrawClassForNFT, opts ...grpc.CallOption) (*MsgWithdrawClassForNFTResponse, error)
	// DepositToken defines a method for depositing Native NFT Token from Layer1 to Layer2
	DepositTokenForNFT(ctx context.Context, in *MsgDepositTokenForNFT, opts ...grpc.CallOption) (*MsgDepositTokenForNFTResponse, error)
	// WithdrawToken defines a method for withdrawing Native NFT Token from Layer2 to Layer1
	WithdrawTokenForNFT(ctx context.Context, in *MsgWithdrawTokenForNFT, opts ...grpc.CallOption) (*MsgWithdrawTokenForNFTResponse, error)
	// CreateL2Space defines a method for creating a Layer2 space
	CreateL2Space(ctx context.Context, in *MsgCreateL2Space, opts ...grpc.CallOption) (*MsgCreateL2SpaceResponse, error)
	// TransferL2Space defines a method for transferring a Layer2 space
	TransferL2Space(ctx context.Context, in *MsgTransferL2Space, opts ...grpc.CallOption) (*MsgTransferL2SpaceResponse, error)
	// CreateL2BlockHeader defines a method for creating a Layer2 record
	CreateL2BlockHeader(ctx context.Context, in *MsgCreateL2BlockHeader, opts ...grpc.CallOption) (*MsgCreateL2BlockHeaderResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateNFTs(ctx context.Context, in *MsgCreateNFTs, opts ...grpc.CallOption) (*MsgCreateNFTsResponse, error) {
	out := new(MsgCreateNFTsResponse)
	err := c.cc.Invoke(ctx, "/iritamod.layer2.v1.Msg/CreateNFTs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateNFTs(ctx context.Context, in *MsgUpdateNFTs, opts ...grpc.CallOption) (*MsgUpdateNFTsResponse, error) {
	out := new(MsgUpdateNFTsResponse)
	err := c.cc.Invoke(ctx, "/iritamod.layer2.v1.Msg/UpdateNFTs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteNFTs(ctx context.Context, in *MsgDeleteNFTs, opts ...grpc.CallOption) (*MsgDeleteNFTsResponse, error) {
	out := new(MsgDeleteNFTsResponse)
	err := c.cc.Invoke(ctx, "/iritamod.layer2.v1.Msg/DeleteNFTs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateClassesForNFT(ctx context.Context, in *MsgUpdateClassesForNFT, opts ...grpc.CallOption) (*MsgUpdateClassesForNFTResponse, error) {
	out := new(MsgUpdateClassesForNFTResponse)
	err := c.cc.Invoke(ctx, "/iritamod.layer2.v1.Msg/UpdateClassesForNFT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DepositClassForNFT(ctx context.Context, in *MsgDepositClassForNFT, opts ...grpc.CallOption) (*MsgDepositClassForNFTResponse, error) {
	out := new(MsgDepositClassForNFTResponse)
	err := c.cc.Invoke(ctx, "/iritamod.layer2.v1.Msg/DepositClassForNFT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) WithdrawClassForNFT(ctx context.Context, in *MsgWithdrawClassForNFT, opts ...grpc.CallOption) (*MsgWithdrawClassForNFTResponse, error) {
	out := new(MsgWithdrawClassForNFTResponse)
	err := c.cc.Invoke(ctx, "/iritamod.layer2.v1.Msg/WithdrawClassForNFT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DepositTokenForNFT(ctx context.Context, in *MsgDepositTokenForNFT, opts ...grpc.CallOption) (*MsgDepositTokenForNFTResponse, error) {
	out := new(MsgDepositTokenForNFTResponse)
	err := c.cc.Invoke(ctx, "/iritamod.layer2.v1.Msg/DepositTokenForNFT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) WithdrawTokenForNFT(ctx context.Context, in *MsgWithdrawTokenForNFT, opts ...grpc.CallOption) (*MsgWithdrawTokenForNFTResponse, error) {
	out := new(MsgWithdrawTokenForNFTResponse)
	err := c.cc.Invoke(ctx, "/iritamod.layer2.v1.Msg/WithdrawTokenForNFT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateL2Space(ctx context.Context, in *MsgCreateL2Space, opts ...grpc.CallOption) (*MsgCreateL2SpaceResponse, error) {
	out := new(MsgCreateL2SpaceResponse)
	err := c.cc.Invoke(ctx, "/iritamod.layer2.v1.Msg/CreateL2Space", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TransferL2Space(ctx context.Context, in *MsgTransferL2Space, opts ...grpc.CallOption) (*MsgTransferL2SpaceResponse, error) {
	out := new(MsgTransferL2SpaceResponse)
	err := c.cc.Invoke(ctx, "/iritamod.layer2.v1.Msg/TransferL2Space", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateL2BlockHeader(ctx context.Context, in *MsgCreateL2BlockHeader, opts ...grpc.CallOption) (*MsgCreateL2BlockHeaderResponse, error) {
	out := new(MsgCreateL2BlockHeaderResponse)
	err := c.cc.Invoke(ctx, "/iritamod.layer2.v1.Msg/CreateL2BlockHeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// CreateNFTs defines a method for creating NFT mappings on Layer2 module.
	CreateNFTs(context.Context, *MsgCreateNFTs) (*MsgCreateNFTsResponse, error)
	// UpdateNFTs defines a method for updating NFT mappings on Layer2 module.
	UpdateNFTs(context.Context, *MsgUpdateNFTs) (*MsgUpdateNFTsResponse, error)
	// DeleteNFTs defines a method for deleting NFT mappings on Layer2 module.
	DeleteNFTs(context.Context, *MsgDeleteNFTs) (*MsgDeleteNFTsResponse, error)
	// UpdateClassesForNFT defines a method for updating NFT Class mappings on Layer2 module.
	UpdateClassesForNFT(context.Context, *MsgUpdateClassesForNFT) (*MsgUpdateClassesForNFTResponse, error)
	// DepositClass defines a method for depositing Native NFT Class from Layer1 to Layer2
	DepositClassForNFT(context.Context, *MsgDepositClassForNFT) (*MsgDepositClassForNFTResponse, error)
	// WithdrawClass defines a method for withdrawing Native NFT Class from Layer2 to Layer1
	WithdrawClassForNFT(context.Context, *MsgWithdrawClassForNFT) (*MsgWithdrawClassForNFTResponse, error)
	// DepositToken defines a method for depositing Native NFT Token from Layer1 to Layer2
	DepositTokenForNFT(context.Context, *MsgDepositTokenForNFT) (*MsgDepositTokenForNFTResponse, error)
	// WithdrawToken defines a method for withdrawing Native NFT Token from Layer2 to Layer1
	WithdrawTokenForNFT(context.Context, *MsgWithdrawTokenForNFT) (*MsgWithdrawTokenForNFTResponse, error)
	// CreateL2Space defines a method for creating a Layer2 space
	CreateL2Space(context.Context, *MsgCreateL2Space) (*MsgCreateL2SpaceResponse, error)
	// TransferL2Space defines a method for transferring a Layer2 space
	TransferL2Space(context.Context, *MsgTransferL2Space) (*MsgTransferL2SpaceResponse, error)
	// CreateL2BlockHeader defines a method for creating a Layer2 record
	CreateL2BlockHeader(context.Context, *MsgCreateL2BlockHeader) (*MsgCreateL2BlockHeaderResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateNFTs(ctx context.Context, req *MsgCreateNFTs) (*MsgCreateNFTsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNFTs not implemented")
}
func (*UnimplementedMsgServer) UpdateNFTs(ctx context.Context, req *MsgUpdateNFTs) (*MsgUpdateNFTsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNFTs not implemented")
}
func (*UnimplementedMsgServer) DeleteNFTs(ctx context.Context, req *MsgDeleteNFTs) (*MsgDeleteNFTsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNFTs not implemented")
}
func (*UnimplementedMsgServer) UpdateClassesForNFT(ctx context.Context, req *MsgUpdateClassesForNFT) (*MsgUpdateClassesForNFTResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClassesForNFT not implemented")
}
func (*UnimplementedMsgServer) DepositClassForNFT(ctx context.Context, req *MsgDepositClassForNFT) (*MsgDepositClassForNFTResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositClassForNFT not implemented")
}
func (*UnimplementedMsgServer) WithdrawClassForNFT(ctx context.Context, req *MsgWithdrawClassForNFT) (*MsgWithdrawClassForNFTResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawClassForNFT not implemented")
}
func (*UnimplementedMsgServer) DepositTokenForNFT(ctx context.Context, req *MsgDepositTokenForNFT) (*MsgDepositTokenForNFTResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositTokenForNFT not implemented")
}
func (*UnimplementedMsgServer) WithdrawTokenForNFT(ctx context.Context, req *MsgWithdrawTokenForNFT) (*MsgWithdrawTokenForNFTResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawTokenForNFT not implemented")
}
func (*UnimplementedMsgServer) CreateL2Space(ctx context.Context, req *MsgCreateL2Space) (*MsgCreateL2SpaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateL2Space not implemented")
}
func (*UnimplementedMsgServer) TransferL2Space(ctx context.Context, req *MsgTransferL2Space) (*MsgTransferL2SpaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferL2Space not implemented")
}
func (*UnimplementedMsgServer) CreateL2BlockHeader(ctx context.Context, req *MsgCreateL2BlockHeader) (*MsgCreateL2BlockHeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateL2BlockHeader not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateNFTs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateNFTs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateNFTs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iritamod.layer2.v1.Msg/CreateNFTs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateNFTs(ctx, req.(*MsgCreateNFTs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateNFTs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateNFTs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateNFTs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iritamod.layer2.v1.Msg/UpdateNFTs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateNFTs(ctx, req.(*MsgUpdateNFTs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteNFTs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteNFTs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteNFTs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iritamod.layer2.v1.Msg/DeleteNFTs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteNFTs(ctx, req.(*MsgDeleteNFTs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateClassesForNFT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateClassesForNFT)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateClassesForNFT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iritamod.layer2.v1.Msg/UpdateClassesForNFT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateClassesForNFT(ctx, req.(*MsgUpdateClassesForNFT))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DepositClassForNFT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDepositClassForNFT)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DepositClassForNFT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iritamod.layer2.v1.Msg/DepositClassForNFT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DepositClassForNFT(ctx, req.(*MsgDepositClassForNFT))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_WithdrawClassForNFT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWithdrawClassForNFT)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).WithdrawClassForNFT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iritamod.layer2.v1.Msg/WithdrawClassForNFT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).WithdrawClassForNFT(ctx, req.(*MsgWithdrawClassForNFT))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DepositTokenForNFT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDepositTokenForNFT)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DepositTokenForNFT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iritamod.layer2.v1.Msg/DepositTokenForNFT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DepositTokenForNFT(ctx, req.(*MsgDepositTokenForNFT))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_WithdrawTokenForNFT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWithdrawTokenForNFT)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).WithdrawTokenForNFT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iritamod.layer2.v1.Msg/WithdrawTokenForNFT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).WithdrawTokenForNFT(ctx, req.(*MsgWithdrawTokenForNFT))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateL2Space_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateL2Space)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateL2Space(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iritamod.layer2.v1.Msg/CreateL2Space",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateL2Space(ctx, req.(*MsgCreateL2Space))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TransferL2Space_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTransferL2Space)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TransferL2Space(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iritamod.layer2.v1.Msg/TransferL2Space",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TransferL2Space(ctx, req.(*MsgTransferL2Space))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateL2BlockHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateL2BlockHeader)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateL2BlockHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iritamod.layer2.v1.Msg/CreateL2BlockHeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateL2BlockHeader(ctx, req.(*MsgCreateL2BlockHeader))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "iritamod.layer2.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNFTs",
			Handler:    _Msg_CreateNFTs_Handler,
		},
		{
			MethodName: "UpdateNFTs",
			Handler:    _Msg_UpdateNFTs_Handler,
		},
		{
			MethodName: "DeleteNFTs",
			Handler:    _Msg_DeleteNFTs_Handler,
		},
		{
			MethodName: "UpdateClassesForNFT",
			Handler:    _Msg_UpdateClassesForNFT_Handler,
		},
		{
			MethodName: "DepositClassForNFT",
			Handler:    _Msg_DepositClassForNFT_Handler,
		},
		{
			MethodName: "WithdrawClassForNFT",
			Handler:    _Msg_WithdrawClassForNFT_Handler,
		},
		{
			MethodName: "DepositTokenForNFT",
			Handler:    _Msg_DepositTokenForNFT_Handler,
		},
		{
			MethodName: "WithdrawTokenForNFT",
			Handler:    _Msg_WithdrawTokenForNFT_Handler,
		},
		{
			MethodName: "CreateL2Space",
			Handler:    _Msg_CreateL2Space_Handler,
		},
		{
			MethodName: "TransferL2Space",
			Handler:    _Msg_TransferL2Space_Handler,
		},
		{
			MethodName: "CreateL2BlockHeader",
			Handler:    _Msg_CreateL2BlockHeader_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "layer2/v1/tx.proto",
}

func (m *MsgCreateNFTs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateNFTs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateNFTs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Tokens) > 0 {
		for iNdEx := len(m.Tokens) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tokens[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0x12
	}
	if m.SpaceId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SpaceId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateNFTsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateNFTsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateNFTsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateNFTs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateNFTs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateNFTs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Tokens) > 0 {
		for iNdEx := len(m.Tokens) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tokens[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0x12
	}
	if m.SpaceId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SpaceId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateNFTsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateNFTsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateNFTsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeleteNFTs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteNFTs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteNFTs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TokenIds) > 0 {
		for iNdEx := len(m.TokenIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TokenIds[iNdEx])
			copy(dAtA[i:], m.TokenIds[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.TokenIds[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0x12
	}
	if m.SpaceId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SpaceId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteNFTsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteNFTsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteNFTsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateClassesForNFT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateClassesForNFT) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateClassesForNFT) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClassUpdatesForNft) > 0 {
		for iNdEx := len(m.ClassUpdatesForNft) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ClassUpdatesForNft[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.SpaceId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SpaceId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateClassesForNFTResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateClassesForNFTResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateClassesForNFTResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDepositClassForNFT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDepositClassForNFT) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDepositClassForNFT) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.BaseUri) > 0 {
		i -= len(m.BaseUri)
		copy(dAtA[i:], m.BaseUri)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BaseUri)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0x12
	}
	if m.SpaceId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SpaceId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgDepositClassForNFTResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDepositClassForNFTResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDepositClassForNFTResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawClassForNFT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawClassForNFT) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawClassForNFT) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0x12
	}
	if m.SpaceId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SpaceId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawClassForNFTResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawClassForNFTResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawClassForNFTResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDepositTokenForNFT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDepositTokenForNFT) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDepositTokenForNFT) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TokenId) > 0 {
		i -= len(m.TokenId)
		copy(dAtA[i:], m.TokenId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TokenId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0x12
	}
	if m.SpaceId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SpaceId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgDepositTokenForNFTResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDepositTokenForNFTResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDepositTokenForNFTResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawTokenForNFT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawTokenForNFT) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawTokenForNFT) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.UriHash) > 0 {
		i -= len(m.UriHash)
		copy(dAtA[i:], m.UriHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.UriHash)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TokenId) > 0 {
		i -= len(m.TokenId)
		copy(dAtA[i:], m.TokenId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TokenId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0x12
	}
	if m.SpaceId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SpaceId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawTokenForNFTResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawTokenForNFTResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawTokenForNFTResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateL2Space) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateL2Space) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateL2Space) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateL2SpaceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateL2SpaceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateL2SpaceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SpaceId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SpaceId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgTransferL2Space) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransferL2Space) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransferL2Space) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0x12
	}
	if m.SpaceId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SpaceId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgTransferL2SpaceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransferL2SpaceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransferL2SpaceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateL2BlockHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateL2BlockHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateL2BlockHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Header) > 0 {
		i -= len(m.Header)
		copy(dAtA[i:], m.Header)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Header)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Height != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if m.SpaceId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SpaceId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateL2BlockHeaderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateL2BlockHeaderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateL2BlockHeaderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateNFTs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SpaceId != 0 {
		n += 1 + sovTx(uint64(m.SpaceId))
	}
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Tokens) > 0 {
		for _, e := range m.Tokens {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateNFTsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateNFTs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SpaceId != 0 {
		n += 1 + sovTx(uint64(m.SpaceId))
	}
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Tokens) > 0 {
		for _, e := range m.Tokens {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateNFTsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeleteNFTs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SpaceId != 0 {
		n += 1 + sovTx(uint64(m.SpaceId))
	}
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.TokenIds) > 0 {
		for _, s := range m.TokenIds {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeleteNFTsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateClassesForNFT) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SpaceId != 0 {
		n += 1 + sovTx(uint64(m.SpaceId))
	}
	if len(m.ClassUpdatesForNft) > 0 {
		for _, e := range m.ClassUpdatesForNft {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateClassesForNFTResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDepositClassForNFT) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SpaceId != 0 {
		n += 1 + sovTx(uint64(m.SpaceId))
	}
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BaseUri)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDepositClassForNFTResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgWithdrawClassForNFT) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SpaceId != 0 {
		n += 1 + sovTx(uint64(m.SpaceId))
	}
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgWithdrawClassForNFTResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDepositTokenForNFT) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SpaceId != 0 {
		n += 1 + sovTx(uint64(m.SpaceId))
	}
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TokenId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDepositTokenForNFTResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgWithdrawTokenForNFT) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SpaceId != 0 {
		n += 1 + sovTx(uint64(m.SpaceId))
	}
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TokenId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.UriHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgWithdrawTokenForNFTResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateL2Space) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateL2SpaceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SpaceId != 0 {
		n += 1 + sovTx(uint64(m.SpaceId))
	}
	return n
}

func (m *MsgTransferL2Space) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SpaceId != 0 {
		n += 1 + sovTx(uint64(m.SpaceId))
	}
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgTransferL2SpaceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateL2BlockHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SpaceId != 0 {
		n += 1 + sovTx(uint64(m.SpaceId))
	}
	if m.Height != 0 {
		n += 1 + sovTx(uint64(m.Height))
	}
	l = len(m.Header)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateL2BlockHeaderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateNFTs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateNFTs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateNFTs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceId", wireType)
			}
			m.SpaceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpaceId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tokens = append(m.Tokens, TokenForNFT{})
			if err := m.Tokens[len(m.Tokens)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateNFTsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateNFTsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateNFTsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateNFTs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateNFTs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateNFTs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceId", wireType)
			}
			m.SpaceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpaceId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tokens = append(m.Tokens, TokenForNFT{})
			if err := m.Tokens[len(m.Tokens)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateNFTsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateNFTsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateNFTsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteNFTs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteNFTs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteNFTs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceId", wireType)
			}
			m.SpaceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpaceId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenIds = append(m.TokenIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteNFTsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteNFTsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteNFTsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateClassesForNFT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateClassesForNFT: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateClassesForNFT: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceId", wireType)
			}
			m.SpaceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpaceId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassUpdatesForNft", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassUpdatesForNft = append(m.ClassUpdatesForNft, UpdateClassForNFT{})
			if err := m.ClassUpdatesForNft[len(m.ClassUpdatesForNft)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateClassesForNFTResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateClassesForNFTResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateClassesForNFTResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDepositClassForNFT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDepositClassForNFT: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDepositClassForNFT: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceId", wireType)
			}
			m.SpaceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpaceId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDepositClassForNFTResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDepositClassForNFTResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDepositClassForNFTResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawClassForNFT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawClassForNFT: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawClassForNFT: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceId", wireType)
			}
			m.SpaceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpaceId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawClassForNFTResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawClassForNFTResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawClassForNFTResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDepositTokenForNFT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDepositTokenForNFT: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDepositTokenForNFT: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceId", wireType)
			}
			m.SpaceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpaceId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDepositTokenForNFTResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDepositTokenForNFTResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDepositTokenForNFTResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawTokenForNFT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawTokenForNFT: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawTokenForNFT: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceId", wireType)
			}
			m.SpaceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpaceId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UriHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UriHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawTokenForNFTResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawTokenForNFTResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawTokenForNFTResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateL2Space) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateL2Space: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateL2Space: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateL2SpaceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateL2SpaceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateL2SpaceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceId", wireType)
			}
			m.SpaceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpaceId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransferL2Space) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransferL2Space: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransferL2Space: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceId", wireType)
			}
			m.SpaceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpaceId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransferL2SpaceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransferL2SpaceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransferL2SpaceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateL2BlockHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateL2BlockHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateL2BlockHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceId", wireType)
			}
			m.SpaceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpaceId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Header = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateL2BlockHeaderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateL2BlockHeaderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateL2BlockHeaderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
